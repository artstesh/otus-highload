{"version":3,"file":"main.2371391d416e1589.js","mappings":"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","sources":["./src/app/api-internal/field-clusters/field-cluster-internal.service.ts","./src/app/api-internal/field-clusters/messages/list-field-clusters.query.ts","./src/app/api-internal/fields/fields-internal.service.ts","./src/app/api-internal/fields/messages/list-fields.query.ts","./src/app/api-internal/helpers/remote-balanced.helper.factory.ts","./src/app/api-internal/helpers/remote-balanced.helper.ts","./src/app/api-internal/helpers/request-queue.factory.ts","./src/app/api-internal/models/query-queue.model.ts","./src/app/api-internal/models/remote-service-request.ts","./src/app/api-internal/regions/messages/list-regions.query.ts","./src/app/api-internal/regions/regions-internal.service.ts","./src/app/api/Geo/base-service.ts","./src/app/api/Geo/fn/cluster/cluster-by-bounding-box-post-plain.ts","./src/app/api/Geo/fn/cluster/cluster-by-bounding-box-post.ts","./src/app/api/Geo/fn/cluster/cluster-reset-post.ts","./src/app/api/Geo/fn/field/field-by-bounding-box-post-plain.ts","./src/app/api/Geo/fn/field/field-by-bounding-box-post.ts","./src/app/api/Geo/fn/field/field-post-plain.ts","./src/app/api/Geo/fn/field/field-post.ts","./src/app/api/Geo/fn/region/region-define-post-plain.ts","./src/app/api/Geo/fn/region/region-define-post.ts","./src/app/api/Geo/fn/region/region-get-plain.ts","./src/app/api/Geo/fn/region/region-get.ts","./src/app/api/Geo/geo-api-configuration.ts","./src/app/api/Geo/geo-api.module.ts","./src/app/api/Geo/index.ts","./src/app/api/Geo/request-builder.ts","./src/app/api/Geo/services/cluster.service.ts","./src/app/api/Geo/services/field.service.ts","./src/app/api/Geo/services/region.service.ts","./src/app/api/fields/base-service.ts","./src/app/api/fields/fields-api-configuration.ts","./src/app/api/fields/fields-api.module.ts","./src/app/api/fields/fn/field/field-id-get-plain.ts","./src/app/api/fields/fn/field/field-id-get.ts","./src/app/api/fields/fn/field/field-post-plain.ts","./src/app/api/fields/fn/field/field-post.ts","./src/app/api/fields/index.ts","./src/app/api/fields/request-builder.ts","./src/app/api/fields/services/field.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/routes.ts","./src/app/sections/gis-page/component/gis/components/gis-clusters/gis-clusters.component.ts","./src/app/sections/gis-page/component/gis/components/gis-clusters/gis-clusters.component.html","./src/app/sections/gis-page/component/gis/components/gis-field-markers/gis-field-markers.component.ts","./src/app/sections/gis-page/component/gis/components/gis-field-markers/gis-field-markers.component.html","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-data-wrapper/gis-field-passport-data-wrapper.component.ts","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-data-wrapper/gis-field-passport-data-wrapper.component.html","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-field-info/gis-field-passport-field-info.component.ts","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-field-info/gis-field-passport-field-info.component.html","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-section-wrapper/gis-field-passport-section-wrapper.component.ts","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-section-wrapper/gis-field-passport-section-wrapper.component.html","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/gis-field-passport-modal.component.ts","./src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/gis-field-passport-modal.component.html","./src/app/sections/gis-page/component/gis/components/gis-field-polygons/gis-field-polygons.component.ts","./src/app/sections/gis-page/component/gis/components/gis-field-polygons/gis-field-polygons.component.html","./src/app/sections/gis-page/component/gis/components/gis-region-polygons/gis-region-polygons.component.ts","./src/app/sections/gis-page/component/gis/components/gis-region-polygons/gis-region-polygons.component.html","./src/app/sections/gis-page/component/gis/gis.component.ts","./src/app/sections/gis-page/component/gis/gis.component.html","./src/app/sections/gis-page/component/gis/messages/commands/show-field-passport.command.ts","./src/app/sections/gis-page/component/gis/messages/events/gis-clusters.event.ts","./src/app/sections/gis-page/component/gis/messages/events/gis-fields.event.ts","./src/app/sections/gis-page/component/gis/services/gis-features-orchestrator.service.ts","./src/app/sections/gis-page/component/gis/services/gis-message-register.service.ts","./src/app/sections/gis-page/gis-page.component.ts","./src/app/sections/gis-page/gis-page.component.html","./src/app/sections/gis-page/messages/commands/apply-gis-extent.command.ts","./src/app/sections/gis-page/messages/commands/zoom-target-fields.command.ts","./src/app/sections/gis-page/models/gis.constants.ts","./src/app/sections/gis-page/services/gis-page-message-registrator.service.ts","./src/app/services/app-message-registrator.service.ts","./src/app/services/app-postboy.service.ts","./src/app/services/title.service.ts","./src/app/shared/components/destructible/destructible.component.ts","./src/app/shared/components/loading-zone/loading-zone.component.ts","./src/app/shared/components/loading-zone/loading-zone.component.html","./src/app/shared/components/map-layer-toggle-control/layer-toggle-control.component.ts","./src/app/shared/components/map-layer-toggle-control/layer-toggle.ts","./src/app/shared/freezed-screen/circle-loader/circle-loader.component.ts","./src/app/shared/freezed-screen/circle-loader/circle-loader.component.html","./src/app/shared/freezed-screen/loader.component.ts","./src/app/shared/freezed-screen/loader.component.html","./src/app/shared/messages/executors/compare-map-position.executor.ts","./src/app/shared/services/component-satellite.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { IPostboyDependingService } from '@artstesh/postboy';\nimport { catchError, of, Subscription, takeUntil } from 'rxjs';\nimport { ListFieldClustersQuery } from '@root/src/app/api-internal/field-clusters/messages/list-field-clusters.query';\nimport { ClusterService } from '@api/Geo';\n\n@Injectable({\n   providedIn: 'root'\n})\nexport class FieldClusterInternalService implements IPostboyDependingService {\n   private readonly _namespace = 'field-cluster-internal';\n\n   constructor(\n      private postboy: AppPostboyService,\n      private remote: ClusterService\n   ) {\n      this.postboy.addNamespace(this._namespace).recordSubject(ListFieldClustersQuery);\n   }\n\n   up(): void {\n      this.postboy.sub(ListFieldClustersQuery).subscribe(qry => this.list(qry));\n   }\n\n   private list(qry: ListFieldClustersQuery) {\n\n      this.remote\n         .clusterByBoundingBoxPost({ body: { extent: qry.extent } })\n         .pipe(\n            takeUntil(qry.cancel$),\n            catchError(err => of([]))\n         )\n         .subscribe(result => qry.finish(result));\n   }\n\n   down(): void {\n      this.postboy.eliminateNamespace(this._namespace);\n   }\n}\n","import { PostboyCallbackMessage } from '@artstesh/postboy';\nimport { FieldCluster } from '@api/Geo';\nimport { Subject } from 'rxjs';\n\nexport class ListFieldClustersQuery extends PostboyCallbackMessage<FieldCluster[]> {\n   static readonly ID = '83bd46de-6178-4bdf-bc77-ba2e07360e87';\n\n   constructor(public extent: number[], public cancel$: Subject<void>) {\n      super();\n   }\n}\n","import { Injectable } from '@angular/core';\r\nimport { IPostboyDependingService } from '@artstesh/postboy';\r\nimport { AppPostboyService } from '../../services/app-postboy.service';\r\nimport { ListFieldsQuery } from './messages/list-fields.query';\r\nimport { catchError, of, takeUntil } from 'rxjs';\r\nimport { FieldService } from '@api/Geo';\r\n\r\n/**\r\n *\r\n */\r\n@Injectable()\r\nexport class FieldsInternalService implements IPostboyDependingService {\r\n   private readonly _namespace = 'fields-internal';\r\n\r\n   constructor(\r\n      private postboy: AppPostboyService,\r\n      private remote: FieldService\r\n   ) {\r\n      this.postboy.addNamespace(this._namespace).recordSubject(ListFieldsQuery);\r\n   }\r\n\r\n   up(): void {\r\n      this.postboy.sub(ListFieldsQuery).subscribe(qry => this.fieldList(qry));\r\n   }\r\n\r\n   private fieldList(qry: ListFieldsQuery): void {\r\n      this.remote.fieldByBoundingBoxPost({body: {extent: qry.extent, zoom: qry.zoom} })\r\n         .pipe(takeUntil(qry.cancel$),catchError(err => of([]))).subscribe({\r\n         next: result => qry.finish(result),\r\n         error: () => qry.finish([])\r\n      });\r\n   }\r\n\r\n   down(): void {\r\n      this.postboy.eliminateNamespace(this._namespace);\r\n   }\r\n}\r\n","import { PostboyCallbackMessage } from '@artstesh/postboy';\nimport { Subject } from 'rxjs';\nimport { GeoField } from '@api/Geo';\n\n/**\n *\n */\nexport class ListFieldsQuery extends PostboyCallbackMessage<GeoField[]> {\n   public static readonly ID = '636092e4-7e0c-44db-897d-c4cbbacccab7';\n\n   /**\n    *\n    */\n   constructor(\n      public extent: number[],\n      public zoom: number,\n      public cancel$: Subject<void>\n   ) {\n      super();\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { RemoteBalancedHelper } from '@root/src/app/api-internal/helpers/remote-balanced.helper';\nimport { RequestQueueFactory } from '@root/src/app/api-internal/helpers/request-queue.factory';\nimport { RemoteHelperSettings } from '@root/src/app/api-internal/models/generic-service/generic-remote-service-option-item';\nimport { RemoteServiceRequest } from '@root/src/app/api-internal/models/remote-service-request';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\n\n/**\n * A factory service for creating instances of `RemoteBalancedHelper`, which facilitates\n * managing remote service requests with balanced and efficient handling.\n *\n * This factory is designed to work with `AppPostboyService` for post operations\n * and leverages `RequestQueueFactory` for managing request queues.\n */\n@Injectable({ providedIn: 'root' })\nexport class RemoteBalancedHelperFactory {\n   /**\n    * Creates an instance of the class.\n    *\n    * @param {AppPostboyService} postboy - The service responsible for handling post operations.\n    * @param {RequestQueueFactory} queueFactory - The factory responsible for creating request queues.\n    */\n   constructor(\n      private postboy: AppPostboyService,\n      private queueFactory: RequestQueueFactory\n   ) {}\n\n   /**\n    * Produces an instance of RemoteBalancedHelper with the provided settings.\n    *\n    * @param {RemoteHelperSettings<M, E>} settings - The configuration settings used to initialize the RemoteBalancedHelper instance.\n    * @return {RemoteBalancedHelper<M, T, E>} An instance of RemoteBalancedHelper configured with the provided settings.\n    */\n   public produce<M extends RemoteServiceRequest<T>, T, E>(\n      settings: RemoteHelperSettings<M, E>\n   ): RemoteBalancedHelper<M, T, E> {\n      return new RemoteBalancedHelper(this.postboy, this.queueFactory, settings);\n   }\n}\n","import { Dictionary } from '@artstesh/collections';\nimport { RequestQueueFactory } from '@root/src/app/api-internal/helpers/request-queue.factory';\nimport { RemoteHelperSettings } from '@root/src/app/api-internal/models/generic-service/generic-remote-service-option-item';\nimport { QueryQueue } from '@root/src/app/api-internal/models/query-queue.model';\nimport { RemoteServiceRequest } from '@root/src/app/api-internal/models/remote-service-request';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\n\nexport class RemoteBalancedHelper<M extends RemoteServiceRequest<T>, T, E> {\n   requests = new Dictionary<QueryQueue<T>>();\n\n   /**\n    * Constructs a new instance of the class with the provided dependencies.\n    *\n    * @param {AppPostboyService} postboy - An instance of the AppPostboyService to handle posting operations.\n    * @param {RequestQueueFactory} queueFactory - A factory to create request queues.\n    * @param {RemoteHelperSettings<M, E>} settings - Configuration settings for the remote helper.\n    */\n   constructor(\n      private postboy: AppPostboyService,\n      public queueFactory: RequestQueueFactory,\n      public settings: RemoteHelperSettings<M, E>\n   ) {}\n\n   /**\n    * Subscribes to the specified message from the `postboy` service and executes a query when the message is received.\n    *\n    * @return {void} No return value.\n    */\n   up(): void {\n      this.postboy.sub(this.settings.message).subscribe(qry => this.execute(qry));\n   }\n\n   /**\n    * Executes the given query and processes it based on specified conditions.\n    *\n    * @param {M} qry - The query object containing the necessary data and flags for execution.\n    * @return {void} - This method does not return a value.\n    */\n   execute(qry: M): void {\n      const queue = this.getQueue(qry.hash());\n      if (qry.force) queue.reset().add(qry);\n      else if (queue.tryFinish(qry)) return;\n      this.settings.load(qry).subscribe({\n         next: m => queue.finish(this.settings.mutation(m)),\n         error: e => queue.finish(this.settings.failure)\n      });\n   }\n\n   /**\n    * Retrieves or creates a query queue associated with the given hash.\n    *\n    * @param {string} hash - The unique identifier used to reference the query queue.\n    * @return {QueryQueue<T>} Returns the query queue associated with the provided hash.\n    */\n   private getQueue(hash: string): QueryQueue<T> {\n      if (!this.requests.has(hash)) {\n         let value = this.queueFactory.produce<T>(this.settings.cache);\n         this.requests.put(hash, value);\n         return value;\n      }\n      return this.requests.take(hash)!;\n   }\n\n   /**\n    * Resets the internal state of the list queue to its initial configuration.\n    *\n    * @return {void} Does not return any value.\n    */\n   reset(hash?: string): void {\n      !!hash ? this.requests.take(hash)?.reset() : this.requests.forEach(q => q.reset());\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { QueryQueue } from '@root/src/app/api-internal/models/query-queue.model';\n/**\n * A factory class responsible for creating instances of QueryQueue.\n * Designed to be provided at the root level using Angular's DI system.\n */\n@Injectable({ providedIn: 'root' })\nexport class RequestQueueFactory {\n   /**\n    * Creates and returns a new instance of QueryQueue.\n    *\n    * @template T The type of elements contained in the QueryQueue.\n    * @return {QueryQueue<T>} A newly created QueryQueue instance.\n    */\n   public produce<T>(cache: boolean): QueryQueue<T> {\n      return new QueryQueue<T>(cache);\n   }\n}\n","import { Queue } from '@artstesh/collections';\r\nimport { PostboyCallbackMessage } from '@artstesh/postboy';\r\n\r\nexport class QueryQueue<D> {\r\n   /**\r\n    * Gets the current data stored in the instance.\r\n    *\r\n    * @return {D | null} The current data or null if no data is set.\r\n    */\r\n   get data(): D | null {\r\n      return this._data;\r\n   }\r\n\r\n   private queries: Queue<PostboyCallbackMessage<D>> = new Queue<PostboyCallbackMessage<D>>();\r\n   private _requestInProgress: boolean = true;\r\n   private _data: D | null = null;\r\n\r\n   /**\r\n    * Constructs an instance of the class with an optional caching mechanism.\r\n    *\r\n    * @param {boolean} cache - Determines if caching should be enabled. Defaults to true.\r\n    * @return {void}\r\n    */\r\n   constructor(private cache: boolean = true) {}\r\n\r\n   /**\r\n    * Resets the state of the instance by clearing stored data.\r\n    * This method sets the internal data to null, effectively resetting the object.\r\n    *\r\n    * @return {void} Does not return a value.\r\n    */\r\n   public reset(): QueryQueue<D> {\r\n      this._data = null;\r\n      return this;\r\n   }\r\n\r\n   /**\r\n    * Attempts to finalize the provided query. It either queues the query for later processing\r\n    * if a request is in progress or data is missing, or completes the query immediately.\r\n    *\r\n    * @param {PostboyCallbackMessage<D>} query - The callback message to be finalized.\r\n    * @return {boolean} - Returns true if the query was successfully finalized, otherwise false.\r\n    */\r\n   public tryFinish(query: PostboyCallbackMessage<D>): boolean {\r\n      if (this._requestInProgress || this._data === null) return this.queries.put(query) && false;\r\n      query.finish(this._data);\r\n      return true;\r\n   }\r\n\r\n   /**\r\n    * Adds a new query to the query queue.\r\n    *\r\n    * @param {PostboyCallbackMessage<D>} query - The query to be added to the queue.\r\n    * @return {QueryQueue<D>} The updated QueryQueue instance.\r\n    */\r\n   public add(query: PostboyCallbackMessage<D>): QueryQueue<D> {\r\n      return this.queries.put(query) && this;\r\n   }\r\n\r\n   /**\r\n    * Marks the operation as finished by updating the internal state and handling each query.\r\n    *\r\n    * @param {D} data - The data to be set for the current operation.\r\n    * @return {void} This method does not return a value.\r\n    */\r\n   public finish(data: D): void {\r\n      if (this.cache) this._data = data;\r\n      this._requestInProgress = false;\r\n      this.queries.each(q => q.finish(data));\r\n   }\r\n}\r\n","import { PostboyCallbackMessage } from '@artstesh/postboy';\r\n\r\nexport class RemoteServiceRequest<T> extends PostboyCallbackMessage<T> {\r\n   /**\r\n    * Creates an instance of the class.    *\r\n    * @param {boolean} [force=false] - A boolean flag to enable or disable forcing functionality.\r\n    */\r\n   constructor(public force: boolean = false) {\r\n      super();\r\n   }\r\n\r\n   public hash = () => this.id;\r\n}\r\n","import { RemoteServiceRequest } from '@root/src/app/api-internal/models/remote-service-request';\nimport { Region } from '@api/Geo';\n\nexport class ListRegionsQuery extends RemoteServiceRequest<Region[]> {\n   static readonly ID = 'f301daf2-1ea7-4a20-9ddf-e2c7f73a8616';\n\n   constructor() {\n      super();\n   }\n}\n","import { Injectable } from '@angular/core';\r\nimport { ListRegionsQuery } from '@root/src/app/api-internal/regions/messages/list-regions.query';\r\nimport { IPostboyDependingService } from '@artstesh/postboy';\r\nimport { RemoteBalancedHelper } from '@root/src/app/api-internal/helpers/remote-balanced.helper';\r\nimport { Region, RegionService } from '@api/Geo';\r\nimport { RemoteBalancedHelperFactory } from '@root/src/app/api-internal/helpers/remote-balanced.helper.factory';\r\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\r\n\r\n@Injectable()\r\nexport class RegionsInternalService implements IPostboyDependingService {\r\n   private readonly _namespace = 'regions-internal';\r\n   listBalancer: RemoteBalancedHelper<ListRegionsQuery, Region[], Region[]>;\r\n\r\n   constructor(remote: RegionService, factory: RemoteBalancedHelperFactory, private postboy: AppPostboyService) {\r\n      this.postboy.addNamespace(this._namespace).recordSubject(ListRegionsQuery);\r\n      this.listBalancer = factory.produce({\r\n         message: ListRegionsQuery,\r\n         load: () => remote.regionGet(),\r\n         mutation: m => m,\r\n         failure: [],\r\n         cache: true\r\n      });\r\n   }\r\n\r\n   /**\r\n    * Moves the list balancer up by invoking the `up` method of the `listBalancer` instance.\r\n    *\r\n    * @return {void} This method does not return a value.\r\n    */\r\n   up(): void {\r\n      this.listBalancer.up();\r\n   }\r\n\r\n   down(): void {\r\n      this.postboy.eliminateNamespace(this._namespace);\r\n   }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { GeoApiConfiguration } from './geo-api-configuration';\r\n\r\n/**\r\n * Base class for services\r\n */\r\n@Injectable()\r\nexport class BaseService {\r\n  constructor(\r\n    protected config: GeoApiConfiguration,\r\n    protected http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  private _rootUrl?: string;\r\n\r\n  /**\r\n   * Returns the root url for all operations in this service. If not set directly in this\r\n   * service, will fallback to `GeoApiConfiguration.rootUrl`.\r\n   */\r\n  get rootUrl(): string {\r\n    return this._rootUrl || this.config.rootUrl;\r\n  }\r\n\r\n  /**\r\n   * Sets the root URL for API operations in this service.\r\n   */\r\n  set rootUrl(rootUrl: string) {\r\n    this._rootUrl = rootUrl;\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { FieldCluster } from '../../models/field-cluster';\r\nimport { GetByBoundingBoxRequest } from '../../models/get-by-bounding-box-request';\r\n\r\nexport interface ClusterByBoundingBoxPost$Plain$Params {\r\n      body?: GetByBoundingBoxRequest\r\n}\r\n\r\nexport function clusterByBoundingBoxPost$Plain(http: HttpClient, rootUrl: string, params?: ClusterByBoundingBoxPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FieldCluster>>> {\r\n  const rb = new RequestBuilder(rootUrl, clusterByBoundingBoxPost$Plain.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Array<FieldCluster>>;\r\n    })\r\n  );\r\n}\r\n\r\nclusterByBoundingBoxPost$Plain.PATH = '/Cluster/by-bounding-box';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { FieldCluster } from '../../models/field-cluster';\r\nimport { GetByBoundingBoxRequest } from '../../models/get-by-bounding-box-request';\r\n\r\nexport interface ClusterByBoundingBoxPost$Params {\r\n      body?: GetByBoundingBoxRequest\r\n}\r\n\r\nexport function clusterByBoundingBoxPost(http: HttpClient, rootUrl: string, params?: ClusterByBoundingBoxPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FieldCluster>>> {\r\n  const rb = new RequestBuilder(rootUrl, clusterByBoundingBoxPost.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Array<FieldCluster>>;\r\n    })\r\n  );\r\n}\r\n\r\nclusterByBoundingBoxPost.PATH = '/Cluster/by-bounding-box';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\n\r\nexport interface ClusterResetPost$Params {\r\n}\r\n\r\nexport function clusterResetPost(http: HttpClient, rootUrl: string, params?: ClusterResetPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n  const rb = new RequestBuilder(rootUrl, clusterResetPost.PATH, 'post');\r\n  if (params) {\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: '*/*', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n    })\r\n  );\r\n}\r\n\r\nclusterResetPost.PATH = '/Cluster/reset';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { GeoField } from '../../models/geo-field';\r\nimport { GetByBoundingBoxRequest } from '../../models/get-by-bounding-box-request';\r\n\r\nexport interface FieldByBoundingBoxPost$Plain$Params {\r\n      body?: GetByBoundingBoxRequest\r\n}\r\n\r\nexport function fieldByBoundingBoxPost$Plain(http: HttpClient, rootUrl: string, params?: FieldByBoundingBoxPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GeoField>>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldByBoundingBoxPost$Plain.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Array<GeoField>>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldByBoundingBoxPost$Plain.PATH = '/Field/by-bounding-box';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { GeoField } from '../../models/geo-field';\r\nimport { GetByBoundingBoxRequest } from '../../models/get-by-bounding-box-request';\r\n\r\nexport interface FieldByBoundingBoxPost$Params {\r\n      body?: GetByBoundingBoxRequest\r\n}\r\n\r\nexport function fieldByBoundingBoxPost(http: HttpClient, rootUrl: string, params?: FieldByBoundingBoxPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GeoField>>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldByBoundingBoxPost.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Array<GeoField>>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldByBoundingBoxPost.PATH = '/Field/by-bounding-box';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { GeoField } from '../../models/geo-field';\r\n\r\nexport interface FieldPost$Plain$Params {\r\n      body?: GeoField\r\n}\r\n\r\nexport function fieldPost$Plain(http: HttpClient, rootUrl: string, params?: FieldPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldPost$Plain.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<string>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldPost$Plain.PATH = '/Field';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { GeoField } from '../../models/geo-field';\r\n\r\nexport interface FieldPost$Params {\r\n      body?: GeoField\r\n}\r\n\r\nexport function fieldPost(http: HttpClient, rootUrl: string, params?: FieldPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldPost.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<string>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldPost.PATH = '/Field';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { DefineRegionRequest } from '../../models/define-region-request';\r\n\r\nexport interface RegionDefinePost$Plain$Params {\r\n      body?: DefineRegionRequest\r\n}\r\n\r\nexport function regionDefinePost$Plain(http: HttpClient, rootUrl: string, params?: RegionDefinePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n  const rb = new RequestBuilder(rootUrl, regionDefinePost$Plain.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<string>;\r\n    })\r\n  );\r\n}\r\n\r\nregionDefinePost$Plain.PATH = '/Region/define';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { DefineRegionRequest } from '../../models/define-region-request';\r\n\r\nexport interface RegionDefinePost$Params {\r\n      body?: DefineRegionRequest\r\n}\r\n\r\nexport function regionDefinePost(http: HttpClient, rootUrl: string, params?: RegionDefinePost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n  const rb = new RequestBuilder(rootUrl, regionDefinePost.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<string>;\r\n    })\r\n  );\r\n}\r\n\r\nregionDefinePost.PATH = '/Region/define';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { Region } from '../../models/region';\r\n\r\nexport interface RegionGet$Plain$Params {\r\n}\r\n\r\nexport function regionGet$Plain(http: HttpClient, rootUrl: string, params?: RegionGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Region>>> {\r\n  const rb = new RequestBuilder(rootUrl, regionGet$Plain.PATH, 'get');\r\n  if (params) {\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Array<Region>>;\r\n    })\r\n  );\r\n}\r\n\r\nregionGet$Plain.PATH = '/Region';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { Region } from '../../models/region';\r\n\r\nexport interface RegionGet$Params {\r\n}\r\n\r\nexport function regionGet(http: HttpClient, rootUrl: string, params?: RegionGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Region>>> {\r\n  const rb = new RequestBuilder(rootUrl, regionGet.PATH, 'get');\r\n  if (params) {\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Array<Region>>;\r\n    })\r\n  );\r\n}\r\n\r\nregionGet.PATH = '/Region';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Global configuration\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GeoApiConfiguration {\r\n  rootUrl: string = '';\r\n}\r\n\r\n/**\r\n * Parameters for `GeoApiModule.forRoot()`\r\n */\r\nexport interface GeoApiConfigurationParams {\r\n  rootUrl?: string;\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { GeoApiConfiguration, GeoApiConfigurationParams } from './geo-api-configuration';\r\n\r\nimport { ClusterService } from './services/cluster.service';\r\nimport { FieldService } from './services/field.service';\r\nimport { RegionService } from './services/region.service';\r\n\r\n/**\r\n * Module that provides all services and configuration.\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    ClusterService,\r\n    FieldService,\r\n    RegionService,\r\n    GeoApiConfiguration\r\n  ],\r\n})\r\nexport class GeoApiModule {\r\n  static forRoot(params: GeoApiConfigurationParams): ModuleWithProviders<GeoApiModule> {\r\n    return {\r\n      ngModule: GeoApiModule,\r\n      providers: [\r\n        {\r\n          provide: GeoApiConfiguration,\r\n          useValue: params\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  constructor( \r\n    @Optional() @SkipSelf() parentModule: GeoApiModule,\r\n    @Optional() http: HttpClient\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('GeoApiModule is already loaded. Import in your base AppModule only.');\r\n    }\r\n    if (!http) {\r\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n      'See also https://github.com/angular/angular/issues/20575');\r\n    }\r\n  }\r\n}\r\n","export { GeoApiConfiguration } from './geo-api-configuration';\r\nexport { BaseService } from './base-service';\r\nexport { RequestBuilder } from './request-builder';\r\nexport { StrictHttpResponse } from './strict-http-response';\r\nexport { GeoApiModule } from './geo-api.module';\r\nexport { DefineRegionRequest } from './models/define-region-request';\r\nexport { FieldCluster } from './models/field-cluster';\r\nexport { GeoField } from './models/geo-field';\r\nexport { GetByBoundingBoxRequest } from './models/get-by-bounding-box-request';\r\nexport { Region } from './models/region';\r\nexport { ClusterService } from './services/cluster.service';\r\nexport { FieldService } from './services/field.service';\r\nexport { RegionService } from './services/region.service';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\r\n\r\n/**\r\n * Custom parameter codec to correctly handle the plus sign in parameter\r\n * values. See https://github.com/angular/angular/issues/18261\r\n */\r\nclass ParameterCodec implements HttpParameterCodec {\r\n  encodeKey(key: string): string {\r\n    return encodeURIComponent(key);\r\n  }\r\n\r\n  encodeValue(value: string): string {\r\n    return encodeURIComponent(value);\r\n  }\r\n\r\n  decodeKey(key: string): string {\r\n    return decodeURIComponent(key);\r\n  }\r\n\r\n  decodeValue(value: string): string {\r\n    return decodeURIComponent(value);\r\n  }\r\n}\r\nconst ParameterCodecInstance = new ParameterCodec();\r\n\r\n/**\r\n * Defines the options for appending a parameter\r\n */\r\ninterface ParameterOptions {\r\n  style?: string;\r\n  explode?: boolean;\r\n}\r\n\r\n/**\r\n * Base class for a parameter\r\n */\r\nabstract class Parameter {\r\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\r\n    this.options = options || {};\r\n    if (this.options.style === null || this.options.style === undefined) {\r\n      this.options.style = defaultStyle;\r\n    }\r\n    if (this.options.explode === null || this.options.explode === undefined) {\r\n      this.options.explode = defaultExplode;\r\n    }\r\n  }\r\n\r\n  serializeValue(value: any, separator = ','): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    } else if (value instanceof Array) {\r\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\r\n    } else if (typeof value === 'object') {\r\n      const array: string[] = [];\r\n      for (const key of Object.keys(value)) {\r\n        let propVal = value[key];\r\n        if (propVal !== null && propVal !== undefined) {\r\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\r\n          if (this.options.explode) {\r\n            array.push(`${key}=${propVal}`);\r\n          } else {\r\n            array.push(key);\r\n            array.push(propVal);\r\n          }\r\n        }\r\n      }\r\n      return array.join(separator);\r\n    } else {\r\n      return String(value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the operation path\r\n */\r\nclass PathParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'simple', false);\r\n  }\r\n\r\n  append(path: string): string {\r\n    let value = this.value;\r\n    if (value === null || value === undefined) {\r\n      value = '';\r\n    }\r\n    let prefix = this.options.style === 'label' ? '.' : '';\r\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\r\n    let alreadySerialized = false;\r\n    if (this.options.style === 'matrix') {\r\n      // The parameter name is just used as prefix, except in some cases...\r\n      prefix = `;${this.name}=`;\r\n      if (this.options.explode && typeof value === 'object') {\r\n        prefix = ';';\r\n        if (value instanceof Array) {\r\n          // For arrays we have to repeat the name for each element\r\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\r\n          value = value.join(';');\r\n          alreadySerialized = true;\r\n        } else {\r\n          // For objects we have to put each the key / value pairs\r\n          value = this.serializeValue(value, ';');\r\n          alreadySerialized = true\r\n        }\r\n      }\r\n    }\r\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\r\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\r\n    path = path.replace(`{${this.name}}`, value);\r\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\r\n    return path;\r\n  }\r\n\r\n  // @ts-ignore\r\n  serializeValue(value: any, separator = ','): string {\r\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\r\n    result = result.replace(/%3D/g, '=');\r\n    result = result.replace(/%3B/g, ';');\r\n    result = result.replace(/%2C/g, ',');\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the query\r\n */\r\nclass QueryParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'form', true);\r\n  }\r\n\r\n  append(params: HttpParams): HttpParams {\r\n    if (this.value instanceof Array) {\r\n      // Array serialization\r\n      if (this.options.explode) {\r\n        for (const v of this.value) {\r\n          params = params.append(this.name, this.serializeValue(v));\r\n        }\r\n      } else {\r\n        const separator = this.options.style === 'spaceDelimited'\r\n          ? ' ' : this.options.style === 'pipeDelimited'\r\n            ? '|' : ',';\r\n        return params.append(this.name, this.serializeValue(this.value, separator));\r\n      }\r\n    } else if (this.value !== null && typeof this.value === 'object') {\r\n      // Object serialization\r\n      if (this.options.style === 'deepObject') {\r\n        // Append a parameter for each key, in the form `name[key]`\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\r\n          }\r\n        }\r\n      } else if (this.options.explode) {\r\n        // Append a parameter for each key without using the parameter name\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            params = params.append(key, this.serializeValue(propVal));\r\n          }\r\n        }\r\n      } else {\r\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\r\n        const array: any[] = [];\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            array.push(key);\r\n            array.push(propVal);\r\n          }\r\n        }\r\n        params = params.append(this.name, this.serializeValue(array));\r\n      }\r\n    } else if (this.value !== null && this.value !== undefined) {\r\n      // Plain value\r\n      params = params.append(this.name, this.serializeValue(this.value));\r\n    }\r\n    return params;\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the HTTP request header\r\n */\r\nclass HeaderParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'simple', false);\r\n  }\r\n\r\n  append(headers: HttpHeaders): HttpHeaders {\r\n    if (this.value !== null && this.value !== undefined) {\r\n      if (this.value instanceof Array) {\r\n        for (const v of this.value) {\r\n          headers = headers.append(this.name, this.serializeValue(v));\r\n        }\r\n      } else {\r\n        headers = headers.append(this.name, this.serializeValue(this.value));\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to build http requests from parameters\r\n */\r\nexport class RequestBuilder {\r\n\r\n  private _path = new Map<string, PathParameter>();\r\n  private _query = new Map<string, QueryParameter>();\r\n  private _header = new Map<string, HeaderParameter>();\r\n  _bodyContent: any | null;\r\n  _bodyContentType?: string;\r\n\r\n  constructor(\r\n    public rootUrl: string,\r\n    public operationPath: string,\r\n    public method: string) {\r\n  }\r\n\r\n  /**\r\n   * Sets a path parameter\r\n   */\r\n  path(name: string, value: any, options?: ParameterOptions): void {\r\n    this._path.set(name, new PathParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets a query parameter\r\n   */\r\n  query(name: string, value: any, options?: ParameterOptions): void {\r\n    this._query.set(name, new QueryParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets a header parameter\r\n   */\r\n  header(name: string, value: any, options?: ParameterOptions): void {\r\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets the body content, along with the content type\r\n   */\r\n  body(value: any, contentType = 'application/json'): void {\r\n    if (value instanceof Blob) {\r\n      this._bodyContentType = value.type;\r\n    } else {\r\n      this._bodyContentType = contentType;\r\n    }\r\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\r\n      // Handle URL-encoded data\r\n      const pairs: Array<[string, string]> = [];\r\n      for (const key of Object.keys(value)) {\r\n        let val = value[key];\r\n        if (!(val instanceof Array)) {\r\n          val = [val];\r\n        }\r\n        for (const v of val) {\r\n          const formValue = this.formDataValue(v);\r\n          if (formValue !== null) {\r\n            pairs.push([key, formValue]);\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\r\n    } else if (this._bodyContentType === 'multipart/form-data') {\r\n      // Handle multipart form data\r\n      const formData = new FormData();\r\n      if (value !== null && value !== undefined) {\r\n        for (const key of Object.keys(value)) {\r\n          const val = value[key];\r\n          if (val instanceof Array) {\r\n            for (const v of val) {\r\n              const toAppend = this.formDataValue(v);\r\n              if (toAppend !== null) {\r\n                formData.append(key, toAppend);\r\n              }\r\n            }\r\n          } else {\r\n            const toAppend = this.formDataValue(val);\r\n            if (toAppend !== null) {\r\n              formData.set(key, toAppend);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = formData;\r\n    } else {\r\n      // The body is the plain content\r\n      this._bodyContent = value;\r\n    }\r\n  }\r\n\r\n  private formDataValue(value: any): any {\r\n    if (value === null || value === undefined) {\r\n      return null;\r\n    }\r\n    if (value instanceof Blob) {\r\n      return value;\r\n    }\r\n    if (typeof value === 'object') {\r\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\r\n    }\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Builds the request with the current set parameters\r\n   */\r\n  build<T = any>(options?: {\r\n    /** Which content types to accept */\r\n    accept?: string;\r\n\r\n    /** The expected response type */\r\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\r\n\r\n    /** Whether to report progress on uploads / downloads */\r\n    reportProgress?: boolean;\r\n\r\n    /** Allow passing HttpContext for HttpClient */\r\n    context?: HttpContext;\r\n  }): HttpRequest<T> {\r\n\r\n    options = options || {};\r\n\r\n    // Path parameters\r\n    let path = this.operationPath;\r\n    for (const pathParam of this._path.values()) {\r\n      path = pathParam.append(path);\r\n    }\r\n    const url = this.rootUrl + path;\r\n\r\n    // Query parameters\r\n    let httpParams = new HttpParams({\r\n      encoder: ParameterCodecInstance\r\n    });\r\n    for (const queryParam of this._query.values()) {\r\n      httpParams = queryParam.append(httpParams);\r\n    }\r\n\r\n    // Header parameters\r\n    let httpHeaders = new HttpHeaders();\r\n    if (options.accept) {\r\n      httpHeaders = httpHeaders.append('Accept', options.accept);\r\n    }\r\n    for (const headerParam of this._header.values()) {\r\n      httpHeaders = headerParam.append(httpHeaders);\r\n    }\r\n\r\n    // Request content headers\r\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\r\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\r\n    }\r\n\r\n    // Perform the request\r\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\r\n      params: httpParams,\r\n      headers: httpHeaders,\r\n      responseType: options.responseType,\r\n      reportProgress: options.reportProgress,\r\n      context: options.context\r\n    });\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { GeoApiConfiguration } from '../geo-api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { clusterByBoundingBoxPost } from '../fn/cluster/cluster-by-bounding-box-post';\r\nimport { ClusterByBoundingBoxPost$Params } from '../fn/cluster/cluster-by-bounding-box-post';\r\nimport { clusterByBoundingBoxPost$Plain } from '../fn/cluster/cluster-by-bounding-box-post-plain';\r\nimport { ClusterByBoundingBoxPost$Plain$Params } from '../fn/cluster/cluster-by-bounding-box-post-plain';\r\nimport { clusterResetPost } from '../fn/cluster/cluster-reset-post';\r\nimport { ClusterResetPost$Params } from '../fn/cluster/cluster-reset-post';\r\nimport { FieldCluster } from '../models/field-cluster';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClusterService extends BaseService {\r\n  constructor(config: GeoApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `clusterByBoundingBoxPost()` */\r\n  static readonly ClusterByBoundingBoxPostPath = '/Cluster/by-bounding-box';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `clusterByBoundingBoxPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  clusterByBoundingBoxPost$Plain$Response(params?: ClusterByBoundingBoxPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FieldCluster>>> {\r\n    return clusterByBoundingBoxPost$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `clusterByBoundingBoxPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  clusterByBoundingBoxPost$Plain(params?: ClusterByBoundingBoxPost$Plain$Params, context?: HttpContext): Observable<Array<FieldCluster>> {\r\n    return this.clusterByBoundingBoxPost$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FieldCluster>>): Array<FieldCluster> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `clusterByBoundingBoxPost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  clusterByBoundingBoxPost$Response(params?: ClusterByBoundingBoxPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FieldCluster>>> {\r\n    return clusterByBoundingBoxPost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `clusterByBoundingBoxPost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  clusterByBoundingBoxPost(params?: ClusterByBoundingBoxPost$Params, context?: HttpContext): Observable<Array<FieldCluster>> {\r\n    return this.clusterByBoundingBoxPost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<FieldCluster>>): Array<FieldCluster> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `clusterResetPost()` */\r\n  static readonly ClusterResetPostPath = '/Cluster/reset';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `clusterResetPost()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  clusterResetPost$Response(params?: ClusterResetPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return clusterResetPost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `clusterResetPost$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  clusterResetPost(params?: ClusterResetPost$Params, context?: HttpContext): Observable<void> {\r\n    return this.clusterResetPost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { GeoApiConfiguration } from '../geo-api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { fieldByBoundingBoxPost } from '../fn/field/field-by-bounding-box-post';\r\nimport { FieldByBoundingBoxPost$Params } from '../fn/field/field-by-bounding-box-post';\r\nimport { fieldByBoundingBoxPost$Plain } from '../fn/field/field-by-bounding-box-post-plain';\r\nimport { FieldByBoundingBoxPost$Plain$Params } from '../fn/field/field-by-bounding-box-post-plain';\r\nimport { fieldPost } from '../fn/field/field-post';\r\nimport { FieldPost$Params } from '../fn/field/field-post';\r\nimport { fieldPost$Plain } from '../fn/field/field-post-plain';\r\nimport { FieldPost$Plain$Params } from '../fn/field/field-post-plain';\r\nimport { GeoField } from '../models/geo-field';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FieldService extends BaseService {\r\n  constructor(config: GeoApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `fieldPost()` */\r\n  static readonly FieldPostPath = '/Field';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost$Plain$Response(params?: FieldPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return fieldPost$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost$Plain(params?: FieldPost$Plain$Params, context?: HttpContext): Observable<string> {\r\n    return this.fieldPost$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldPost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost$Response(params?: FieldPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return fieldPost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldPost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost(params?: FieldPost$Params, context?: HttpContext): Observable<string> {\r\n    return this.fieldPost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `fieldByBoundingBoxPost()` */\r\n  static readonly FieldByBoundingBoxPostPath = '/Field/by-bounding-box';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldByBoundingBoxPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldByBoundingBoxPost$Plain$Response(params?: FieldByBoundingBoxPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GeoField>>> {\r\n    return fieldByBoundingBoxPost$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldByBoundingBoxPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldByBoundingBoxPost$Plain(params?: FieldByBoundingBoxPost$Plain$Params, context?: HttpContext): Observable<Array<GeoField>> {\r\n    return this.fieldByBoundingBoxPost$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<GeoField>>): Array<GeoField> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldByBoundingBoxPost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldByBoundingBoxPost$Response(params?: FieldByBoundingBoxPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GeoField>>> {\r\n    return fieldByBoundingBoxPost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldByBoundingBoxPost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldByBoundingBoxPost(params?: FieldByBoundingBoxPost$Params, context?: HttpContext): Observable<Array<GeoField>> {\r\n    return this.fieldByBoundingBoxPost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<GeoField>>): Array<GeoField> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { GeoApiConfiguration } from '../geo-api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { Region } from '../models/region';\r\nimport { regionDefinePost } from '../fn/region/region-define-post';\r\nimport { RegionDefinePost$Params } from '../fn/region/region-define-post';\r\nimport { regionDefinePost$Plain } from '../fn/region/region-define-post-plain';\r\nimport { RegionDefinePost$Plain$Params } from '../fn/region/region-define-post-plain';\r\nimport { regionGet } from '../fn/region/region-get';\r\nimport { RegionGet$Params } from '../fn/region/region-get';\r\nimport { regionGet$Plain } from '../fn/region/region-get-plain';\r\nimport { RegionGet$Plain$Params } from '../fn/region/region-get-plain';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class RegionService extends BaseService {\r\n  constructor(config: GeoApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `regionGet()` */\r\n  static readonly RegionGetPath = '/Region';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `regionGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  regionGet$Plain$Response(params?: RegionGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Region>>> {\r\n    return regionGet$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `regionGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  regionGet$Plain(params?: RegionGet$Plain$Params, context?: HttpContext): Observable<Array<Region>> {\r\n    return this.regionGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Region>>): Array<Region> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `regionGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  regionGet$Response(params?: RegionGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Region>>> {\r\n    return regionGet(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `regionGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  regionGet(params?: RegionGet$Params, context?: HttpContext): Observable<Array<Region>> {\r\n    return this.regionGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<Region>>): Array<Region> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `regionDefinePost()` */\r\n  static readonly RegionDefinePostPath = '/Region/define';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `regionDefinePost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  regionDefinePost$Plain$Response(params?: RegionDefinePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return regionDefinePost$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `regionDefinePost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  regionDefinePost$Plain(params?: RegionDefinePost$Plain$Params, context?: HttpContext): Observable<string> {\r\n    return this.regionDefinePost$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `regionDefinePost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  regionDefinePost$Response(params?: RegionDefinePost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return regionDefinePost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `regionDefinePost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  regionDefinePost(params?: RegionDefinePost$Params, context?: HttpContext): Observable<string> {\r\n    return this.regionDefinePost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FieldsApiConfiguration } from './fields-api-configuration';\r\n\r\n/**\r\n * Base class for services\r\n */\r\n@Injectable()\r\nexport class BaseService {\r\n  constructor(\r\n    protected config: FieldsApiConfiguration,\r\n    protected http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  private _rootUrl?: string;\r\n\r\n  /**\r\n   * Returns the root url for all operations in this service. If not set directly in this\r\n   * service, will fallback to `FieldsApiConfiguration.rootUrl`.\r\n   */\r\n  get rootUrl(): string {\r\n    return this._rootUrl || this.config.rootUrl;\r\n  }\r\n\r\n  /**\r\n   * Sets the root URL for API operations in this service.\r\n   */\r\n  set rootUrl(rootUrl: string) {\r\n    this._rootUrl = rootUrl;\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Global configuration\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FieldsApiConfiguration {\r\n  rootUrl: string = '';\r\n}\r\n\r\n/**\r\n * Parameters for `FieldsApiModule.forRoot()`\r\n */\r\nexport interface FieldsApiConfigurationParams {\r\n  rootUrl?: string;\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FieldsApiConfiguration, FieldsApiConfigurationParams } from './fields-api-configuration';\r\n\r\nimport { FieldService } from './services/field.service';\r\n\r\n/**\r\n * Module that provides all services and configuration.\r\n */\r\n@NgModule({\r\n  imports: [],\r\n  exports: [],\r\n  declarations: [],\r\n  providers: [\r\n    FieldService,\r\n    FieldsApiConfiguration\r\n  ],\r\n})\r\nexport class FieldsApiModule {\r\n  static forRoot(params: FieldsApiConfigurationParams): ModuleWithProviders<FieldsApiModule> {\r\n    return {\r\n      ngModule: FieldsApiModule,\r\n      providers: [\r\n        {\r\n          provide: FieldsApiConfiguration,\r\n          useValue: params\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  constructor( \r\n    @Optional() @SkipSelf() parentModule: FieldsApiModule,\r\n    @Optional() http: HttpClient\r\n  ) {\r\n    if (parentModule) {\r\n      throw new Error('FieldsApiModule is already loaded. Import in your base AppModule only.');\r\n    }\r\n    if (!http) {\r\n      throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\r\n      'See also https://github.com/angular/angular/issues/20575');\r\n    }\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { Field } from '../../models/field';\r\n\r\nexport interface FieldIdGet$Plain$Params {\r\n  id: string;\r\n}\r\n\r\nexport function fieldIdGet$Plain(http: HttpClient, rootUrl: string, params: FieldIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Field>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldIdGet$Plain.PATH, 'get');\r\n  if (params) {\r\n    rb.path('id', params.id, {});\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Field>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldIdGet$Plain.PATH = '/Field/{id}';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { Field } from '../../models/field';\r\n\r\nexport interface FieldIdGet$Params {\r\n  id: string;\r\n}\r\n\r\nexport function fieldIdGet(http: HttpClient, rootUrl: string, params: FieldIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Field>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldIdGet.PATH, 'get');\r\n  if (params) {\r\n    rb.path('id', params.id, {});\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<Field>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldIdGet.PATH = '/Field/{id}';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { Field } from '../../models/field';\r\n\r\nexport interface FieldPost$Plain$Params {\r\n      body?: Field\r\n}\r\n\r\nexport function fieldPost$Plain(http: HttpClient, rootUrl: string, params?: FieldPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldPost$Plain.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<string>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldPost$Plain.PATH = '/Field';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\nimport { StrictHttpResponse } from '../../strict-http-response';\r\nimport { RequestBuilder } from '../../request-builder';\r\n\r\nimport { Field } from '../../models/field';\r\n\r\nexport interface FieldPost$Params {\r\n      body?: Field\r\n}\r\n\r\nexport function fieldPost(http: HttpClient, rootUrl: string, params?: FieldPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n  const rb = new RequestBuilder(rootUrl, fieldPost.PATH, 'post');\r\n  if (params) {\r\n    rb.body(params.body, 'application/*+json');\r\n  }\r\n\r\n  return http.request(\r\n    rb.build({ responseType: 'json', accept: 'text/json', context })\r\n  ).pipe(\r\n    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n    map((r: HttpResponse<any>) => {\r\n      return r as StrictHttpResponse<string>;\r\n    })\r\n  );\r\n}\r\n\r\nfieldPost.PATH = '/Field';\r\n","export { FieldsApiConfiguration } from './fields-api-configuration';\r\nexport { BaseService } from './base-service';\r\nexport { RequestBuilder } from './request-builder';\r\nexport { StrictHttpResponse } from './strict-http-response';\r\nexport { FieldsApiModule } from './fields-api.module';\r\nexport { Field } from './models/field';\r\nexport { FieldService } from './services/field.service';\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpRequest, HttpParameterCodec, HttpParams, HttpHeaders, HttpContext } from '@angular/common/http';\r\n\r\n/**\r\n * Custom parameter codec to correctly handle the plus sign in parameter\r\n * values. See https://github.com/angular/angular/issues/18261\r\n */\r\nclass ParameterCodec implements HttpParameterCodec {\r\n  encodeKey(key: string): string {\r\n    return encodeURIComponent(key);\r\n  }\r\n\r\n  encodeValue(value: string): string {\r\n    return encodeURIComponent(value);\r\n  }\r\n\r\n  decodeKey(key: string): string {\r\n    return decodeURIComponent(key);\r\n  }\r\n\r\n  decodeValue(value: string): string {\r\n    return decodeURIComponent(value);\r\n  }\r\n}\r\nconst ParameterCodecInstance = new ParameterCodec();\r\n\r\n/**\r\n * Defines the options for appending a parameter\r\n */\r\ninterface ParameterOptions {\r\n  style?: string;\r\n  explode?: boolean;\r\n}\r\n\r\n/**\r\n * Base class for a parameter\r\n */\r\nabstract class Parameter {\r\n  constructor(public name: string, public value: any, public options: ParameterOptions, defaultStyle: string, defaultExplode: boolean) {\r\n    this.options = options || {};\r\n    if (this.options.style === null || this.options.style === undefined) {\r\n      this.options.style = defaultStyle;\r\n    }\r\n    if (this.options.explode === null || this.options.explode === undefined) {\r\n      this.options.explode = defaultExplode;\r\n    }\r\n  }\r\n\r\n  serializeValue(value: any, separator = ','): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    } else if (value instanceof Array) {\r\n      return value.map(v => this.serializeValue(v).split(separator).join(encodeURIComponent(separator))).join(separator);\r\n    } else if (typeof value === 'object') {\r\n      const array: string[] = [];\r\n      for (const key of Object.keys(value)) {\r\n        let propVal = value[key];\r\n        if (propVal !== null && propVal !== undefined) {\r\n          propVal = this.serializeValue(propVal).split(separator).join(encodeURIComponent(separator));\r\n          if (this.options.explode) {\r\n            array.push(`${key}=${propVal}`);\r\n          } else {\r\n            array.push(key);\r\n            array.push(propVal);\r\n          }\r\n        }\r\n      }\r\n      return array.join(separator);\r\n    } else {\r\n      return String(value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the operation path\r\n */\r\nclass PathParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'simple', false);\r\n  }\r\n\r\n  append(path: string): string {\r\n    let value = this.value;\r\n    if (value === null || value === undefined) {\r\n      value = '';\r\n    }\r\n    let prefix = this.options.style === 'label' ? '.' : '';\r\n    let separator = this.options.explode ? prefix === '' ? ',' : prefix : ',';\r\n    let alreadySerialized = false;\r\n    if (this.options.style === 'matrix') {\r\n      // The parameter name is just used as prefix, except in some cases...\r\n      prefix = `;${this.name}=`;\r\n      if (this.options.explode && typeof value === 'object') {\r\n        prefix = ';';\r\n        if (value instanceof Array) {\r\n          // For arrays we have to repeat the name for each element\r\n          value = value.map(v => `${this.name}=${this.serializeValue(v, ';')}`);\r\n          value = value.join(';');\r\n          alreadySerialized = true;\r\n        } else {\r\n          // For objects we have to put each the key / value pairs\r\n          value = this.serializeValue(value, ';');\r\n          alreadySerialized = true\r\n        }\r\n      }\r\n    }\r\n    value = prefix + (alreadySerialized ? value : this.serializeValue(value, separator));\r\n    // Replace both the plain variable and the corresponding variant taking in the prefix and explode into account\r\n    path = path.replace(`{${this.name}}`, value);\r\n    path = path.replace(`{${prefix}${this.name}${this.options.explode ? '*' : ''}}`, value);\r\n    return path;\r\n  }\r\n\r\n  // @ts-ignore\r\n  serializeValue(value: any, separator = ','): string {\r\n    var result = typeof value === 'string' ? encodeURIComponent(value) : super.serializeValue(value, separator);\r\n    result = result.replace(/%3D/g, '=');\r\n    result = result.replace(/%3B/g, ';');\r\n    result = result.replace(/%2C/g, ',');\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the query\r\n */\r\nclass QueryParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'form', true);\r\n  }\r\n\r\n  append(params: HttpParams): HttpParams {\r\n    if (this.value instanceof Array) {\r\n      // Array serialization\r\n      if (this.options.explode) {\r\n        for (const v of this.value) {\r\n          params = params.append(this.name, this.serializeValue(v));\r\n        }\r\n      } else {\r\n        const separator = this.options.style === 'spaceDelimited'\r\n          ? ' ' : this.options.style === 'pipeDelimited'\r\n            ? '|' : ',';\r\n        return params.append(this.name, this.serializeValue(this.value, separator));\r\n      }\r\n    } else if (this.value !== null && typeof this.value === 'object') {\r\n      // Object serialization\r\n      if (this.options.style === 'deepObject') {\r\n        // Append a parameter for each key, in the form `name[key]`\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            params = params.append(`${this.name}[${key}]`, this.serializeValue(propVal));\r\n          }\r\n        }\r\n      } else if (this.options.explode) {\r\n        // Append a parameter for each key without using the parameter name\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            params = params.append(key, this.serializeValue(propVal));\r\n          }\r\n        }\r\n      } else {\r\n        // Append a single parameter whose values are a comma-separated list of key,value,key,value...\r\n        const array: any[] = [];\r\n        for (const key of Object.keys(this.value)) {\r\n          const propVal = this.value[key];\r\n          if (propVal !== null && propVal !== undefined) {\r\n            array.push(key);\r\n            array.push(propVal);\r\n          }\r\n        }\r\n        params = params.append(this.name, this.serializeValue(array));\r\n      }\r\n    } else if (this.value !== null && this.value !== undefined) {\r\n      // Plain value\r\n      params = params.append(this.name, this.serializeValue(this.value));\r\n    }\r\n    return params;\r\n  }\r\n}\r\n\r\n/**\r\n * A parameter in the HTTP request header\r\n */\r\nclass HeaderParameter extends Parameter {\r\n  constructor(name: string, value: any, options: ParameterOptions) {\r\n    super(name, value, options, 'simple', false);\r\n  }\r\n\r\n  append(headers: HttpHeaders): HttpHeaders {\r\n    if (this.value !== null && this.value !== undefined) {\r\n      if (this.value instanceof Array) {\r\n        for (const v of this.value) {\r\n          headers = headers.append(this.name, this.serializeValue(v));\r\n        }\r\n      } else {\r\n        headers = headers.append(this.name, this.serializeValue(this.value));\r\n      }\r\n    }\r\n    return headers;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper to build http requests from parameters\r\n */\r\nexport class RequestBuilder {\r\n\r\n  private _path = new Map<string, PathParameter>();\r\n  private _query = new Map<string, QueryParameter>();\r\n  private _header = new Map<string, HeaderParameter>();\r\n  _bodyContent: any | null;\r\n  _bodyContentType?: string;\r\n\r\n  constructor(\r\n    public rootUrl: string,\r\n    public operationPath: string,\r\n    public method: string) {\r\n  }\r\n\r\n  /**\r\n   * Sets a path parameter\r\n   */\r\n  path(name: string, value: any, options?: ParameterOptions): void {\r\n    this._path.set(name, new PathParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets a query parameter\r\n   */\r\n  query(name: string, value: any, options?: ParameterOptions): void {\r\n    this._query.set(name, new QueryParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets a header parameter\r\n   */\r\n  header(name: string, value: any, options?: ParameterOptions): void {\r\n    this._header.set(name, new HeaderParameter(name, value, options || {}));\r\n  }\r\n\r\n  /**\r\n   * Sets the body content, along with the content type\r\n   */\r\n  body(value: any, contentType = 'application/json'): void {\r\n    if (value instanceof Blob) {\r\n      this._bodyContentType = value.type;\r\n    } else {\r\n      this._bodyContentType = contentType;\r\n    }\r\n    if (this._bodyContentType === 'application/x-www-form-urlencoded' && value !== null && typeof value === 'object') {\r\n      // Handle URL-encoded data\r\n      const pairs: Array<[string, string]> = [];\r\n      for (const key of Object.keys(value)) {\r\n        let val = value[key];\r\n        if (!(val instanceof Array)) {\r\n          val = [val];\r\n        }\r\n        for (const v of val) {\r\n          const formValue = this.formDataValue(v);\r\n          if (formValue !== null) {\r\n            pairs.push([key, formValue]);\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = pairs.map(p => `${encodeURIComponent(p[0])}=${encodeURIComponent(p[1])}`).join('&');\r\n    } else if (this._bodyContentType === 'multipart/form-data') {\r\n      // Handle multipart form data\r\n      const formData = new FormData();\r\n      if (value !== null && value !== undefined) {\r\n        for (const key of Object.keys(value)) {\r\n          const val = value[key];\r\n          if (val instanceof Array) {\r\n            for (const v of val) {\r\n              const toAppend = this.formDataValue(v);\r\n              if (toAppend !== null) {\r\n                formData.append(key, toAppend);\r\n              }\r\n            }\r\n          } else {\r\n            const toAppend = this.formDataValue(val);\r\n            if (toAppend !== null) {\r\n              formData.set(key, toAppend);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this._bodyContent = formData;\r\n    } else {\r\n      // The body is the plain content\r\n      this._bodyContent = value;\r\n    }\r\n  }\r\n\r\n  private formDataValue(value: any): any {\r\n    if (value === null || value === undefined) {\r\n      return null;\r\n    }\r\n    if (value instanceof Blob) {\r\n      return value;\r\n    }\r\n    if (typeof value === 'object') {\r\n      return new Blob([JSON.stringify(value)], {type: 'application/json'})\r\n    }\r\n    return String(value);\r\n  }\r\n\r\n  /**\r\n   * Builds the request with the current set parameters\r\n   */\r\n  build<T = any>(options?: {\r\n    /** Which content types to accept */\r\n    accept?: string;\r\n\r\n    /** The expected response type */\r\n    responseType?: 'json' | 'text' | 'blob' | 'arraybuffer';\r\n\r\n    /** Whether to report progress on uploads / downloads */\r\n    reportProgress?: boolean;\r\n\r\n    /** Allow passing HttpContext for HttpClient */\r\n    context?: HttpContext;\r\n  }): HttpRequest<T> {\r\n\r\n    options = options || {};\r\n\r\n    // Path parameters\r\n    let path = this.operationPath;\r\n    for (const pathParam of this._path.values()) {\r\n      path = pathParam.append(path);\r\n    }\r\n    const url = this.rootUrl + path;\r\n\r\n    // Query parameters\r\n    let httpParams = new HttpParams({\r\n      encoder: ParameterCodecInstance\r\n    });\r\n    for (const queryParam of this._query.values()) {\r\n      httpParams = queryParam.append(httpParams);\r\n    }\r\n\r\n    // Header parameters\r\n    let httpHeaders = new HttpHeaders();\r\n    if (options.accept) {\r\n      httpHeaders = httpHeaders.append('Accept', options.accept);\r\n    }\r\n    for (const headerParam of this._header.values()) {\r\n      httpHeaders = headerParam.append(httpHeaders);\r\n    }\r\n\r\n    // Request content headers\r\n    if (this._bodyContentType && !(this._bodyContent instanceof FormData)) {\r\n      httpHeaders = httpHeaders.set('Content-Type', this._bodyContentType);\r\n    }\r\n\r\n    // Perform the request\r\n    return new HttpRequest<T>(this.method.toUpperCase(), url, this._bodyContent, {\r\n      params: httpParams,\r\n      headers: httpHeaders,\r\n      responseType: options.responseType,\r\n      reportProgress: options.reportProgress,\r\n      context: options.context\r\n    });\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { FieldsApiConfiguration } from '../fields-api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { Field } from '../models/field';\r\nimport { fieldIdGet } from '../fn/field/field-id-get';\r\nimport { FieldIdGet$Params } from '../fn/field/field-id-get';\r\nimport { fieldIdGet$Plain } from '../fn/field/field-id-get-plain';\r\nimport { FieldIdGet$Plain$Params } from '../fn/field/field-id-get-plain';\r\nimport { fieldPost } from '../fn/field/field-post';\r\nimport { FieldPost$Params } from '../fn/field/field-post';\r\nimport { fieldPost$Plain } from '../fn/field/field-post-plain';\r\nimport { FieldPost$Plain$Params } from '../fn/field/field-post-plain';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FieldService extends BaseService {\r\n  constructor(config: FieldsApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `fieldPost()` */\r\n  static readonly FieldPostPath = '/Field';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldPost$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost$Plain$Response(params?: FieldPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return fieldPost$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldPost$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost$Plain(params?: FieldPost$Plain$Params, context?: HttpContext): Observable<string> {\r\n    return this.fieldPost$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldPost()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost$Response(params?: FieldPost$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {\r\n    return fieldPost(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldPost$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  fieldPost(params?: FieldPost$Params, context?: HttpContext): Observable<string> {\r\n    return this.fieldPost$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<string>): string => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `fieldIdGet()` */\r\n  static readonly FieldIdGetPath = '/Field/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldIdGet$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  fieldIdGet$Plain$Response(params: FieldIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Field>> {\r\n    return fieldIdGet$Plain(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldIdGet$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  fieldIdGet$Plain(params: FieldIdGet$Plain$Params, context?: HttpContext): Observable<Field> {\r\n    return this.fieldIdGet$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Field>): Field => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `fieldIdGet()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  fieldIdGet$Response(params: FieldIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Field>> {\r\n    return fieldIdGet(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `fieldIdGet$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  fieldIdGet(params: FieldIdGet$Params, context?: HttpContext): Observable<Field> {\r\n    return this.fieldIdGet$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Field>): Field => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core';\nimport { ModalPostboyService } from '@artstesh/modals';\nimport { AppMessageRegistrator } from '@root/src/app/services/app-message-registrator.service';\nimport { TitleService } from '@root/src/app/services/title.service';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\nimport { RegionsInternalService } from '@root/src/app/api-internal/regions/regions-internal.service';\n\n/**\n * The AppComponent is the root components of the application.\n *\n * This components is responsible for initializing application-wide services\n * and handles authentication status on initialization.\n *\n * The components extends DestructibleComponent to manage resources during\n * the lifecycle of the components, ensuring a proper cleanup.\n */\n@Component({\n   selector: 'app-root',\n   templateUrl: 'app.component.html',\n   providers: [AppMessageRegistrator, ModalPostboyService, TitleService, RegionsInternalService]\n})\nexport class AppComponent extends DestructibleComponent {\n\n   constructor(\n      private appMessageRegistrator: AppMessageRegistrator\n   ) {\n      super();\n      appMessageRegistrator.up();\n   }\n\n   onDestroy = () => {\n      this.appMessageRegistrator.down();\n   };\n}\n","<router-outlet></router-outlet>\r\n<art-modal-root></art-modal-root>\r\n","import { LocationStrategy, PathLocationStrategy } from '@angular/common';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { ChartModule } from '@artstesh/charts';\nimport { ArtModalModule } from '@artstesh/modals';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { APP_ROUTES } from '@root/src/app/routes';\nimport { environment } from '@root/src/environments/environment';\nimport { AppComponent } from './app.component';\nimport { FieldsApiModule } from './api/fields';\nimport { GeoApiModule } from '@api/Geo';\n\n/**\n * This is the root module of the application.\n *\n * The `AppModule` class is decorated with the `@NgModule` decorator that defines metadata for the module, including:\n *\n */\n@NgModule({\n   declarations: [AppComponent],\n   imports: [\n      BrowserModule,\n      HttpClientModule,\n      RouterModule.forRoot(APP_ROUTES),\n      FieldsApiModule.forRoot({ rootUrl: environment.fields }),\n      GeoApiModule.forRoot({ rootUrl: environment.geo }),\n      ArtModalModule\n   ],\n   providers: [{ provide: LocationStrategy, useClass: PathLocationStrategy }],\n   bootstrap: [AppComponent]\n})\nexport class AppModule {\n   /**\n    * Constructor for initializing the class with required services and registering for specific events.\n    *\n    * @param {PublicEventsService} eventService - The service responsible for handling public events.\n    */\n   // constructor(private readonly eventService: PublicEventsService) {\n   //    this.eventService\n   //       .registerForEvents()\n   //       .pipe(filter(notification => notification.type === EventTypes.ConfigLoaded))\n   //       .subscribe(config => {\n   //          // ignore\n   //       });\n   // }\n}\n","import { Routes } from '@angular/router';\r\nimport { GisPageComponent } from '@root/src/app/sections/gis-page/gis-page.component';\r\n\r\n/**\r\n * APP_ROUTES is a constant array of route configurations for an Angular application.\r\n * It defines the routing paths, associated components, and route guards, if any,\r\n * that should be used when navigating to different parts of the application.\r\n *\r\n * This constant is intended to be used with Angular's RouterModule to set up\r\n * application routing by supplying it to the RouterModule.forRoot or RouterModule.forChild method.\r\n */\r\nexport const APP_ROUTES: Routes = [\r\n   {\r\n      component: GisPageComponent,\r\n      path: ''\r\n   }\r\n];\r\n","import { ChangeDetectionStrategy, Component, OnInit, signal } from '@angular/core';\nimport {\n   ClusterLayerSettings,\n   MapModule,\n   MapPostboyService,\n   MarkerModel,\n   MarkerStyleHelper,\n   TextStyleHelper\n} from '@artstesh/maps';\nimport { GisClustersEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-clusters.event';\nimport { GisConstants } from '@root/src/app/sections/gis-page/models/gis.constants';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\n\n@Component({\n   selector: 'app-gis-clusters',\n   standalone: true,\n   imports: [MapModule],\n   templateUrl: './gis-clusters.component.html',\n   styleUrls: [],\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisClustersComponent extends DestructibleComponent implements OnInit {\n   clusterLayerSettings = new ClusterLayerSettings()\n      .setMaxZoom(12).setStyle(fs => {\n      let count = 0;\n         fs.forEach(f => count+=(f as unknown as { count: number }).count);\n         return MarkerStyleHelper.withText(\n            MarkerStyleHelper.circle(11, '#173867', '#fff', 1),\n            TextStyleHelper.get(count + '', '600 8px Arial,serif', '#fff')\n         );\n   });\n   markers = signal<MarkerModel[]>([]);\n\n   constructor(private postboy: AppPostboyService) {\n      super();\n   }\n\n   ngOnInit(): void {\n      this.postboy\n         .sub(GisClustersEvent)\n         .subscribe(ev =>\n            this.markers.set(ev.items.map((p, i) => new MarkerModel(p.lat!, p.lon!, i, { count: p.count })))\n         );\n   }\n}\n","<art-cluster-layer [settings]=\"clusterLayerSettings\">\r\n    <art-markers [layerName]=\"clusterLayerSettings.name\" [markers]=\"markers()\"></art-markers>\r\n</art-cluster-layer>\r\n","import { ChangeDetectionStrategy, Component, OnInit, signal } from '@angular/core';\nimport { ClusterLayerSettings, MapModule, MarkerModel, MarkerStyleHelper, TextStyleHelper } from '@artstesh/maps';\nimport { GisFieldsEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-fields.event';\nimport { GisConstants } from '@root/src/app/sections/gis-page/models/gis.constants';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\n\n/**\n *\n */\n@Component({\n   selector: 'app-gis-field-markers',\n   standalone: true,\n   imports: [MapModule],\n   templateUrl: './gis-field-markers.component.html',\n   styleUrls: [],\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisFieldMarkersComponent extends DestructibleComponent implements OnInit {\n   clusterLayerSettings = new ClusterLayerSettings()\n      .setMaxZoom(15)\n      .setMinZoom(12).setDistance(100)\n      .setStyle(f => MarkerStyleHelper.withText(\n         MarkerStyleHelper.circle(11,'#963cff', '#fff', 2),\n         TextStyleHelper.get(f.length === 1 ? '' : f.length+'', '600 8px Arial,serif', '#fff')\n      ));\n   markers = signal<MarkerModel[]>([]);\n\n   constructor(\n      private postboy: AppPostboyService\n   ) {\n      super();\n   }\n\n   ngOnInit(): void {\n      this.postboy\n         .sub(GisFieldsEvent)\n         .subscribe(ev =>\n            this.markers.set(ev.items.filter(i => !i.wkt).map(p => new MarkerModel(p.lat!, p.lon!, p.id!)))\n         );\n   }\n}\n","<art-cluster-layer [settings]=\"clusterLayerSettings\">\r\n   <art-markers [layerName]=\"clusterLayerSettings.name\" [markers]=\"markers()\"></art-markers>\r\n </art-cluster-layer>\r\n","import { ChangeDetectionStrategy, Component, input, TemplateRef } from '@angular/core';\nimport { FlexModule } from '@ngbracket/ngx-layout';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n   selector: 'app-gis-field-passport-data-wrapper',\n   standalone: true,\n   imports: [FlexModule, NgTemplateOutlet, TranslateModule],\n   templateUrl: './gis-field-passport-data-wrapper.component.html',\n   styleUrl: './gis-field-passport-data-wrapper.component.scss',\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisFieldPassportDataWrapperComponent {\n   label = input.required<string>();\n   contentRef = input.required<TemplateRef<any>>();\n}\n","<div class=\"data-wrapper\" fxLayout=\"column\"  fxLayoutGap=\"10px\">\r\n    <div class=\"data-title\">{{label() | translate}}</div>\r\n    <div class=\"data-value\">\r\n        <ng-container *ngTemplateOutlet=\"contentRef()\"> </ng-container>\r\n    </div>\r\n</div>\r\n\r\n","import { ChangeDetectionStrategy, Component, input } from '@angular/core';\nimport {\n   GisFieldPassportDataWrapperComponent\n} from '@root/src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-data-wrapper/gis-field-passport-data-wrapper.component';\nimport { FieldFeatureInfoModel } from '@root/src/app/sections/gis-page/component/gis/models/field-feature-info.model';\nimport { DecimalPipe } from '@angular/common';\nimport { FlexModule } from '@ngbracket/ngx-layout';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n   selector: 'app-gis-field-passport-field-info',\n   standalone: true,\n   imports: [GisFieldPassportDataWrapperComponent, DecimalPipe, FlexModule, TranslateModule],\n   templateUrl: './gis-field-passport-field-info.component.html',\n   styleUrl: './gis-field-passport-field-info.component.scss',\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisFieldPassportFieldInfoComponent {\n   field = input.required<FieldFeatureInfoModel>();\n}\n","<div class=\"info-wrapper\" fxLayout=\"row\" fxLayoutGap=\"20px\">\r\n    <app-gis-field-passport-data-wrapper label=\"Field Id\" [contentRef]=\"fieldId\"></app-gis-field-passport-data-wrapper>\r\n    <app-gis-field-passport-data-wrapper label=\"Field area\" [contentRef]=\"area\"></app-gis-field-passport-data-wrapper>\r\n</div>\r\n\r\n<ng-template #fieldId>\r\n    {{field().id}}\r\n</ng-template>\r\n\r\n<ng-template #area>\r\n    {{field().areaM2/10000 | number: '1.0-2'}} {{'Ha' | translate}}\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, input, TemplateRef } from '@angular/core';\nimport { NgTemplateOutlet } from '@angular/common';\nimport { FlexModule } from '@ngbracket/ngx-layout';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@Component({\n   selector: 'app-gis-field-passport-section-wrapper',\n   standalone: true,\n   imports: [NgTemplateOutlet, FlexModule, TranslateModule],\n   templateUrl: './gis-field-passport-section-wrapper.component.html',\n   styleUrl: './gis-field-passport-section-wrapper.component.scss',\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisFieldPassportSectionWrapperComponent {\n   label = input.required<string>();\n   contentRef = input.required<TemplateRef<any>>();\n}\n","<div class=\"section-wrapper\" fxLayout=\"column\"  fxLayoutGap=\"10px\">\r\n    <div class=\"section-title\">{{label() | translate}}</div>\r\n    <ng-container *ngTemplateOutlet=\"contentRef()\"> </ng-container>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, OnInit, signal, ViewEncapsulation } from '@angular/core';\nimport {\n   ArtModalModule,\n   CloseModalCommand,\n   ModalPostboyService,\n   ModalSettings,\n   OpenModalCommand\n} from '@artstesh/modals';\nimport { FlexModule } from '@ngbracket/ngx-layout';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GisFieldPassportFieldInfoComponent } from '@root/src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-field-info/gis-field-passport-field-info.component';\nimport { GisFieldPassportSectionWrapperComponent } from '@root/src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/components/gis-field-passport-section-wrapper/gis-field-passport-section-wrapper.component';\nimport { ShowFieldPassportCommand } from '@root/src/app/sections/gis-page/component/gis/messages/commands/show-field-passport.command';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\nimport { switchMap, tap } from 'rxjs';\nimport { LoadingZoneComponent } from '@shared/components/loading-zone/loading-zone.component';\nimport { FieldFeatureInfoModel } from '@root/src/app/sections/gis-page/component/gis/models/field-feature-info.model';\n\n@Component({\n   selector: 'app-gis-field-passport-modal',\n   standalone: true,\n   imports: [\n      ArtModalModule,\n      GisFieldPassportSectionWrapperComponent,\n      TranslateModule,\n      FlexModule,\n      GisFieldPassportFieldInfoComponent,\n      LoadingZoneComponent\n   ],\n   templateUrl: './gis-field-passport-modal.component.html',\n   styleUrl: './gis-field-passport-modal.component.scss',\n   changeDetection: ChangeDetectionStrategy.OnPush,\n   encapsulation: ViewEncapsulation.None\n})\nexport class GisFieldPassportModalComponent extends DestructibleComponent implements OnInit {\n   settings: ModalSettings = new ModalSettings();\n   readonly field = signal<FieldFeatureInfoModel | null>(null);\n\n   constructor(\n      private postboy: AppPostboyService,\n      private modalPostboy: ModalPostboyService\n   ) {\n      super();\n   }\n\n   ngOnInit(): void {\n      this.postboy\n         .sub(ShowFieldPassportCommand)\n         .pipe(\n            tap(c => this.field.set(c.field)),\n            switchMap(c => this.modalPostboy.fireCallback(new OpenModalCommand(this.settings.id)))\n         )\n         .subscribe();\n   }\n\n   close(): void {\n      this.modalPostboy.fire(new CloseModalCommand(this.settings.id));\n   }\n}\n","<art-modal [settings]=\"settings\">\r\n    <div (click)=\"close()\" class=\"closer\" fxLayoutAlign=\"end \">✖</div>\r\n    <app-loading-zone [contentRef]=\"cadastralLoadingZone\" [isLoading]=\"!field()\"></app-loading-zone>\r\n    <ng-template #cadastralLoadingZone>\r\n        <div class=\"modal-content-wrapper\" fxLayout=\"column\" fxLayoutGap=\"20px\">\r\n            <app-gis-field-passport-section-wrapper label=\"Field info\"\r\n                                                    [contentRef]=\"fieldInfoModalContent\">\r\n            </app-gis-field-passport-section-wrapper>\r\n        </div>\r\n    </ng-template>\r\n</art-modal>\r\n\r\n<ng-template #fieldInfoModalContent>\r\n    <app-gis-field-passport-field-info [field]=\"field()\"></app-gis-field-passport-field-info>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, OnInit, signal } from '@angular/core';\nimport { FeatureLayerSettings, MapModule, PolygonModel, PolygonStyleHelper } from '@artstesh/maps';\nimport { GisFieldsEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-fields.event';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\nimport Style from 'ol/style/Style';\nimport { GisConstants } from '../../../../models/gis.constants';\n\n/**\n *\n */\n@Component({\n   selector: 'app-gis-field-polygons',\n   standalone: true,\n   imports: [MapModule],\n   templateUrl: './gis-field-polygons.component.html',\n   styleUrls: [],\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisFieldPolygonsComponent extends DestructibleComponent implements OnInit {\n   private style: Style = PolygonStyleHelper.simple('#1CA49464', '#1ca494', 2);\n   polygons = signal<PolygonModel[]>([]);\n\n   layerSettings = new FeatureLayerSettings()\n      .setMinZoom(15)\n      .setName(GisConstants.GisFieldPolygonsLayerName)\n      .setStyle(this.style);\n\n   constructor(private postboy: AppPostboyService) {\n      super();\n   }\n   ngOnInit(): void {\n      this.postboy\n         .sub(GisFieldsEvent)\n         .subscribe(ev =>\n            this.polygons.set(ev.items.filter(i => !!i.wkt).map(p => PolygonModel.fromWKT(p.id!, p.wkt!)))\n         );\n   }\n}\n","<art-feature-layer [settings]=\"layerSettings\">\r\n   <art-polygons [layerName]=\"layerSettings.name\" [polygons]=\"polygons()\"></art-polygons>\r\n</art-feature-layer>\r\n","import { ChangeDetectionStrategy, Component, OnInit, signal } from '@angular/core';\nimport { FeatureLayerSettings, MapModule, PolygonModel, PolygonStyleHelper } from '@artstesh/maps';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\nimport Style from 'ol/style/Style';\nimport { ListRegionsQuery } from '@root/src/app/api-internal/regions/messages/list-regions.query';\n\n/**\n *\n */\n@Component({\n   selector: 'app-gis-region-polygons',\n   standalone: true,\n   imports: [MapModule],\n   templateUrl: './gis-region-polygons.component.html',\n   styleUrls: [],\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GisReionPolygonsComponent extends DestructibleComponent implements OnInit {\n   polygons = signal<PolygonModel[]>([]);\n   private polygonStyle: Style = PolygonStyleHelper.simple('transparent', '#a4511c', 2);\n   layerSettings = new FeatureLayerSettings().setStyle(this.polygonStyle);\n\n   constructor(private postboy: AppPostboyService) {\n      super();\n   }\n\n   ngOnInit(): void {\n      this.postboy.fireCallback(new ListRegionsQuery()).subscribe(rs => {\n         this.polygons.set(rs.map(r => PolygonModel.fromWKT(r.id!, r.wkt!)));\n      });\n   }\n}\n","<art-feature-layer [settings]=\"layerSettings\">\r\n   <art-polygons [layerName]=\"layerSettings.name\" [polygons]=\"polygons()\"></art-polygons>\r\n</art-feature-layer>\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport {\n   FitToPolygonsCommand,\n   MapLyrs,\n   MapModule,\n   MapPostboyService,\n   MapSettings,\n   ZoomControlSettings\n} from '@artstesh/maps';\nimport { FlexModule } from '@ngbracket/ngx-layout';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { DestructibleComponent } from '@root/src/app/shared/components/destructible/destructible.component';\nimport { GisReionPolygonsComponent } from './components/gis-region-polygons/gis-region-polygons.component';\nimport { LayerToggleControlComponent } from '../../../../shared/components/map-layer-toggle-control/layer-toggle-control.component';\nimport { ApplyGisExtentCommand } from '../../messages/commands/apply-gis-extent.command';\nimport { GisMessageRegisterService } from '@root/src/app/sections/gis-page/component/gis/services/gis-message-register.service';\nimport { GisFieldPassportModalComponent } from '@root/src/app/sections/gis-page/component/gis/components/gis-field-passport-modal/gis-field-passport-modal.component';\nimport { GisFeaturesOrchestratorService } from '@root/src/app/sections/gis-page/component/gis/services/gis-features-orchestrator.service';\nimport {\n   GisFieldMarkersComponent\n} from '@root/src/app/sections/gis-page/component/gis/components/gis-field-markers/gis-field-markers.component';\nimport {\n   GisFieldPolygonsComponent\n} from '@root/src/app/sections/gis-page/component/gis/components/gis-field-polygons/gis-field-polygons.component';\nimport {\n   GisClustersComponent\n} from '@root/src/app/sections/gis-page/component/gis/components/gis-clusters/gis-clusters.component';\n\n@Component({\n   selector: 'app-gis',\n   templateUrl: 'gis.component.html',\n   styleUrl: 'gis.component.scss',\n   standalone: true,\n   imports: [\n      FlexModule,\n      DragDropModule,\n      MapModule,\n      GisReionPolygonsComponent,\n      LayerToggleControlComponent,\n      GisFieldPassportModalComponent,\n      GisFieldMarkersComponent,\n      GisFieldPolygonsComponent,\n      GisClustersComponent\n   ],\n   providers: [GisMessageRegisterService, GisFeaturesOrchestratorService],\n   changeDetection: ChangeDetectionStrategy.OnPush,\n   encapsulation: ViewEncapsulation.None\n})\nexport class GisComponent extends DestructibleComponent implements OnInit {\n   settings = new MapSettings()\n      .setCenter([30, -2])\n      .setZoom(8)\n      .setInteractionSettings({ altShiftDragRotate: false, pinchRotate: false })\n      .setLyrs(MapLyrs.Terrain);\n   zoomSettings = new ZoomControlSettings().setZoomInLabel('Zoom In');\n\n   /**\n    * Constructor of the class.\n    */\n   constructor(\n      private postboy: AppPostboyService,\n      private mapPostboy: MapPostboyService,\n      private register: GisMessageRegisterService\n   ) {\n      super();\n   }\n\n   /**\n    * Initializes the components after Angular first displays the data-bound properties and sets up the components.\n    * This method subscribes to the CommonDropdownOpenStateEvent to monitor when the dropdown is open,\n    * and if it is, it checks the viewport size of the first scrollable element.\n    * @return {void} No return value.\n    */\n   ngOnInit(): void {\n      this.register.up();\n      this.observeVisibiliyMarkers();\n   }\n\n   private observeVisibiliyMarkers(): void {\n      this.postboy.sub(ApplyGisExtentCommand).subscribe(f => {\n         this.mapPostboy.fire(new FitToPolygonsCommand(f.polygons));\n      });\n   }\n\n   onDestroy = () => this.register.down();\n}\n","<art-map-plate [settings]=\"settings\">\r\n    <app-gis-region-polygons></app-gis-region-polygons>\r\n    <app-gis-field-polygons></app-gis-field-polygons>\r\n    <app-gis-field-markers></app-gis-field-markers>\r\n    <app-gis-clusters></app-gis-clusters>\r\n    <art-map-control-zoom [settings]=\"zoomSettings\"></art-map-control-zoom>\r\n    <app-map-layer-toggle-control [(settings)]=\"settings\"></app-map-layer-toggle-control>\r\n</art-map-plate>\r\n<app-gis-field-passport-modal></app-gis-field-passport-modal>\r\n","import { PostboyGenericMessage } from '@artstesh/postboy';\nimport { FieldFeatureInfoModel } from '@root/src/app/sections/gis-page/component/gis/models/field-feature-info.model';\n\nexport class ShowFieldPassportCommand extends PostboyGenericMessage {\n   static readonly ID = '415f6877-f15f-4e8f-a8eb-bd68056edf63';\n\n   constructor(public field: FieldFeatureInfoModel) {\n      super();\n   }\n}\n","import { PostboyGenericMessage } from '@artstesh/postboy';\nimport { FieldCluster } from '@api/Geo';\n\nexport class GisClustersEvent extends PostboyGenericMessage {\n   static readonly ID = 'd88f836c-9b30-401b-b1cf-b9c450f56144';\n\n   constructor(public items: FieldCluster[]) {\n      super();\n   }\n}\n","import { PostboyGenericMessage } from '@artstesh/postboy';\nimport { FieldCluster } from '@api/Geo';\nimport { GeoField } from '@api/Geo';\n\nexport class GisFieldsEvent extends PostboyGenericMessage {\n   static readonly ID = 'e9a4fd44-72e9-497f-b21e-8d56255b9e35';\n\n   constructor(public items: GeoField[]) {\n      super();\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { IPostboyDependingService } from '@artstesh/postboy';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { GetMapPositionExecutor, MapMoveEndEvent, MapPosition, MapPostboyService } from '@artstesh/maps';\nimport { CompareMapPositionExecutor } from '@shared/messages/executors/compare-map-position.executor';\nimport { debounceTime, filter, map, startWith } from 'rxjs/operators';\nimport { Subject, switchMap, tap } from 'rxjs';\nimport { GisConstants } from '@root/src/app/sections/gis-page/models/gis.constants';\nimport { GisClustersEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-clusters.event';\nimport { ListFieldClustersQuery } from '@root/src/app/api-internal/field-clusters/messages/list-field-clusters.query';\nimport { ListFieldsQuery } from '@root/src/app/api-internal/fields/messages/list-fields.query';\nimport { GisFieldsEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-fields.event';\nimport { FieldCluster, GeoField } from '@api/Geo';\n\n@Injectable()\nexport class GisFeaturesOrchestratorService implements IPostboyDependingService {\n   private previousPosition?: MapPosition;\n\n   constructor( public postboy: AppPostboyService,\n                private mapPostboy: MapPostboyService) {\n\n   }\n   up(): void {\n      let cancel$: Subject<void>;\n      this.mapPostboy\n         .sub(MapMoveEndEvent)\n         .pipe(\n            map(ev => ev.position!),\n            startWith(this.mapPostboy.exec(new GetMapPositionExecutor())),\n            filter(ev => !!ev && this.mapPositionFilter(ev)),\n            tap(() => {\n               cancel$?.next();\n               cancel$ = new Subject();\n            })\n         )\n         .subscribe(position => {\n            if (position!.zoom < 12) {\n               this.postboy.fireCallback(new ListFieldClustersQuery(position!.extent,cancel$))\n                  .subscribe(rs => this.update(rs, []));\n            } else {\n               this.postboy.fireCallback(new ListFieldsQuery(position!.extent!, position!.zoom!, cancel$))\n                  .subscribe(fs => this.update([], fs))\n            }\n         });\n   }\n\n   private update(clusters: FieldCluster[], fields: GeoField[]): void {\n      this.postboy.fire(new GisClustersEvent(clusters));\n      this.postboy.fire(new GisFieldsEvent(fields));\n   }\n\n   private mapPositionFilter(position: MapPosition): boolean {\n      let result = this.postboy.exec<boolean>(new CompareMapPositionExecutor(position, this.previousPosition))\n      this.previousPosition = position;\n      return result;\n   }\n   down?: (() => void) | undefined;\n}\n","import { Injectable } from '@angular/core';\r\nimport { PostboyAbstractRegistrator } from '@artstesh/postboy';\r\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\r\nimport {\r\n   ShowFieldPassportCommand\r\n} from '@root/src/app/sections/gis-page/component/gis/messages/commands/show-field-passport.command';\r\nimport {\r\n   GisFeaturesOrchestratorService\r\n} from '@root/src/app/sections/gis-page/component/gis/services/gis-features-orchestrator.service';\r\nimport { GisClustersEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-clusters.event';\r\nimport { GisFieldsEvent } from '@root/src/app/sections/gis-page/component/gis/messages/events/gis-fields.event';\r\n\r\n@Injectable()\r\nexport class GisMessageRegisterService extends PostboyAbstractRegistrator {\r\n\r\n   constructor(postboy: AppPostboyService, feature: GisFeaturesOrchestratorService) {\r\n      super(postboy);\r\n      this.registerServices([feature]);\r\n   }\r\n\r\n   protected _up(): void {\r\n      this.recordSubject(ShowFieldPassportCommand);\r\n      this.recordSubject(GisClustersEvent);\r\n      this.recordSubject(GisFieldsEvent);\r\n   }\r\n}\r\n","import { ChangeDetectionStrategy, Component, OnDestroy, ViewEncapsulation } from '@angular/core';\r\nimport { MapPostboyService } from '@artstesh/maps';\r\nimport { FlexModule } from '@ngbracket/ngx-layout';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { DestructibleComponent } from '../../shared/components/destructible/destructible.component';\r\nimport { GisComponent } from './component/gis/gis.component';\r\nimport { GisPageMessageRegistratorService } from './services/gis-page-message-registrator.service';\r\nimport { FieldsInternalService } from '../../api-internal/fields/fields-internal.service';\r\n\r\n/**\r\n * The TileMapPageComponent is responsible for displaying Tile-map page content.\r\n */\r\n@Component({\r\n   selector: 'app-gis-page',\r\n   templateUrl: 'gis-page.component.html',\r\n   styleUrl: 'gis-page.component.scss',\r\n   standalone: true,\r\n   encapsulation: ViewEncapsulation.None,\r\n   changeDetection: ChangeDetectionStrategy.OnPush,\r\n   imports: [\r\n      FlexModule,\r\n      GisComponent,\r\n      TranslateModule\r\n   ],\r\n   providers: [\r\n      FieldsInternalService,\r\n      GisPageMessageRegistratorService,\r\n      MapPostboyService,\r\n   ]\r\n})\r\nexport class GisPageComponent extends DestructibleComponent implements OnDestroy {\r\n   /**\r\n    * Constructs an instance of the class and initializes the GisPageMessageRegistratorService.\r\n    *\r\n    * @param {GisPageMessageRegistratorService} registrator - The GisPageMessageRegistratorService responsible for managing application messages.\r\n    */\r\n   constructor(private registrator: GisPageMessageRegistratorService) {\r\n      super();\r\n      this.registrator.up();\r\n   }\r\n\r\n   /**\r\n    * @description\r\n    * A callback function that is invoked when the components or object is being destroyed.\r\n    * This function typically contains cleanup logic to ensure that resources are properly\r\n    * released and the system remains stable after the components's lifecycle ends.\r\n    *\r\n    * Specifically, it calls the `down` method on `this.registrator` to perform any\r\n    * necessary deregistration or cleanup tasks related to message handling or communication.\r\n    *\r\n    * @type {Function}\r\n    */\r\n   ngOnDestroy(): void {\r\n      this.registrator.down();\r\n   }\r\n}\r\n","<app-gis fxFill></app-gis>\r\n","import { PolygonModel } from '@artstesh/maps';\nimport { PostboyGenericMessage } from '@artstesh/postboy';\n\n/**\n * The ApplyGisFilterCommand class is a specialized implementation of the PostboyGenericMessage,\n * representing a command to apply tile-map filters. This class includes\n * a specific identifier for the command and inherits generic messaging behavior.\n *\n * This command can be identified globally by its static readonly ID property.\n *\n * Inherits from PostboyGenericMessage.\n */\nexport class ApplyGisExtentCommand extends PostboyGenericMessage {\n   public static readonly ID = 'ea486c2e-5bf9-48bf-a314-0c40af75f3d1';\n\n   constructor(public polygons: PolygonModel[]) {\n      super();\n   }\n}\n","import { PostboyGenericMessage } from '@artstesh/postboy';\n\nexport class ZoomTargetFieldsCommand extends PostboyGenericMessage {\n   static readonly ID = '8372fdc2-c9df-46ce-b9dc-defe5773adc4';\n\n   constructor() {\n      super();\n   }\n}\n","export class GisConstants {\r\n   public static GisFieldPolygonsLayerName = 'gis-field-polygons';\r\n   public static GisFieldMarkersLayerName = 'gis-field-markers';\r\n   public static CnhFieldPolygonEdgeZoom = 15;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { PostboyAbstractRegistrator } from '@artstesh/postboy';\nimport { FieldClusterInternalService } from '@root/src/app/api-internal/field-clusters/field-cluster-internal.service';\nimport { ListFieldClustersQuery } from '@root/src/app/api-internal/field-clusters/messages/list-field-clusters.query';\nimport { FieldsInternalService } from '@root/src/app/api-internal/fields/fields-internal.service';\nimport { ListFieldsQuery } from '@root/src/app/api-internal/fields/messages/list-fields.query';\nimport { ZoomTargetFieldsCommand } from '@root/src/app/sections/gis-page/messages/commands/zoom-target-fields.command';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { ApplyGisExtentCommand } from '../messages/commands/apply-gis-extent.command';\n\n@Injectable()\nexport class GisPageMessageRegistratorService extends PostboyAbstractRegistrator {\n   /**\n    * Registers handlers for replay and subject events.\n    *\n    * @return {void}\n    */\n   protected _up(): void {\n      this.recordSubject(ApplyGisExtentCommand);\n      this.recordSubject(ZoomTargetFieldsCommand);\n   }\n\n   /**\n    * Constructor for initializing the service with dependencies.\n    *\n    */\n   constructor(postboy: AppPostboyService, fields: FieldsInternalService, clusters: FieldClusterInternalService) {\n      super(postboy);\n      this.registerServices([fields, clusters]);\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { PostboyAbstractRegistrator } from '@artstesh/postboy';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\nimport { TitleService } from '@root/src/app/services/title.service';\nimport {\n   CompareMapPositionExecutor,\n   CompareMapPositionExecutorHandler\n} from '@shared/messages/executors/compare-map-position.executor';\nimport { RegionsInternalService } from '@root/src/app/api-internal/regions/regions-internal.service';\n\n/**\n * AppMessageRegistrator class is responsible for registering message handlers\n * related to theme settings using the PostboyAbstractRegistrator.\n * It registers both replay and subject handlers, particularly for color theme events\n * and theme commands.\n *\n * The constructor initializes the class by calling the parent constructor with the\n * specified AppPostboyService instance and registers a list of services including\n * the ColorThemeService.\n *\n * Methods:\n * - _up(): Registers message handlers for replaying and subject events.\n *\n * Dependencies:\n * - postboy: An instance of AppPostboyService used for postboy operations.\n * - color: An instance of ColorThemeService for handling color theme logic.\n */\n@Injectable()\nexport class AppMessageRegistrator extends PostboyAbstractRegistrator {\n   /**\n    * Registers handlers for replay and subject events related to color theme changes.\n    *\n    * @return {void}\n    */\n   protected _up(): void {\n      this.recordHandler(CompareMapPositionExecutor, new CompareMapPositionExecutorHandler());\n   }\n\n   constructor(postboy: AppPostboyService, title: TitleService, regions: RegionsInternalService) {\n      super(postboy);\n      this.registerServices([title, regions]);\n   }\n}\n","import { Injectable } from '@angular/core';\r\nimport { PostboyService } from '@artstesh/postboy';\r\n\r\n/**\r\n * AppPostboyService provides enhanced functionality by extending the PostboyService.\r\n * This service is injectable and is provided at the root level, ensuring the single\r\n * instance is available throughout the application.\r\n */\r\n@Injectable({\r\n   providedIn: 'root'\r\n})\r\nexport class AppPostboyService extends PostboyService {\r\n   constructor() {\r\n      super();\r\n   }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { IPostboyDependingService } from '@artstesh/postboy';\nimport { AppPostboyService } from '@root/src/app/services/app-postboy.service';\n\n/**\n * Service responsible for managing and setting the application title dynamically.\n * Implements IPostboyDependingService interface.\n */\n@Injectable()\nexport class TitleService implements IPostboyDependingService {\n   private readonly defaultTitle = 'Otus Highload';\n   private title = this.defaultTitle;\n\n   constructor(\n      private postboy: AppPostboyService,\n      private titleService: Title\n   ) {}\n\n   /**\n    * Subscribes to necessary observables and events to update the application title dynamically.\n    * @return {void} Does not return a value.\n    */\n   up(): void {\n      this.titleService.setTitle(this.title);\n   }\n}\n","import { Component, OnDestroy, Optional } from '@angular/core';\r\nimport { ComponentSatelliteService } from '@shared/services/component-satellite.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * A components that manages its own destruction lifecycle, ensuring that\r\n * all subscriptions are properly unsubscribed to avoid memory leaks.\r\n *\r\n * This components also allows for an optional cleanup function to be executed\r\n * when the components is destroyed.\r\n */\r\n@Component({\r\n   template: '',\r\n   standalone: true\r\n})\r\nexport abstract class DestructibleComponent implements OnDestroy {\r\n   protected subs: Subscription[] = [];\r\n   protected onDestroy?: () => void;\r\n\r\n   /**\r\n    * Constructs an instance of the class.\r\n    *\r\n    * @param {ComponentSatelliteService} [satellite] - An optional instance of the ComponentSatelliteService used to manage satellite configurations or interactions.\r\n    */\r\n   constructor(@Optional() private satellite?: ComponentSatelliteService) {}\r\n\r\n   /**\r\n    * Lifecycle hook that is called when a directive, pipe, or service is destroyed.\r\n    * This method ensures that all subscriptions are properly unsubscribed to prevent memory leaks.\r\n    * It also executes an optional cleanup function if provided.\r\n    *\r\n    * @return {void} No return value.\r\n    */\r\n   ngOnDestroy(): void {\r\n      this.subs.forEach(s => s.unsubscribe());\r\n      this.satellite?.down();\r\n      if (this.onDestroy) this.onDestroy();\r\n   }\r\n}\r\n","import { NgIf, NgTemplateOutlet } from '@angular/common';\r\nimport {\r\n   ChangeDetectionStrategy,\r\n   ChangeDetectorRef,\r\n   Component,\r\n   Input,\r\n   TemplateRef,\r\n   ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FlexModule } from '@ngbracket/ngx-layout';\r\nimport { LoaderComponent } from '@shared/freezed-screen/loader.component';\r\n\r\n/**\r\n * Component representing a loading zone with configurable loading state.\r\n * This component provides an isolated section in the UI displaying loading indicators\r\n * based on the provided `isLoading` state.\r\n *\r\n * The visual appearance and behavior are influenced by the view encapsulation, change detection strategy,\r\n * and the imported modules including FlexModule for layout, NgIf for structural directives,\r\n * and LoaderComponent for the loading indicator.\r\n *\r\n * The component leverages Angular's OnPush change detection strategy and ViewEncapsulation.None\r\n * for efficient rendering and styling management.\r\n */\r\n@Component({\r\n   selector: 'app-loading-zone',\r\n   standalone: true,\r\n   imports: [FlexModule, NgIf, LoaderComponent, NgTemplateOutlet],\r\n   templateUrl: './loading-zone.component.html',\r\n   styleUrl: './loading-zone.component.scss',\r\n   changeDetection: ChangeDetectionStrategy.OnPush,\r\n   encapsulation: ViewEncapsulation.None\r\n})\r\nexport class LoadingZoneComponent {\r\n   @Input() size = 48;\r\n   @Input() contentRef: TemplateRef<any> | null = null;\r\n   /**\r\n    * Setter for the `isLoading` state. Updates the internal `_isLoading` property\r\n    * and triggers change detection to update the view.\r\n    *\r\n    * @param {boolean} v - The new value for the `isLoading` state.\r\n    */\r\n   @Input() set isLoading(v: boolean) {\r\n      this._isLoading = v;\r\n      this.detector.detectChanges();\r\n   }\r\n   _isLoading: boolean = false;\r\n\r\n   /**\r\n    * Constructor for the class that initializes with a ChangeDetectorRef instance.\r\n    *\r\n    * @param {ChangeDetectorRef} detector - The Angular ChangeDetectorRef used for detecting and triggering change detection in Angular components.\r\n    */\r\n   constructor(private detector: ChangeDetectorRef) {}\r\n}\r\n","<div fxFill *ngIf=\"!_isLoading\">\r\n    <ng-container *ngTemplateOutlet=\"contentRef\"> </ng-container>\r\n</div>\r\n<div fxFill *ngIf=\"_isLoading\" fxLayoutAlign=\"center center\">\r\n    <app-loader [size]=\"size\"></app-loader>\r\n</div>\r\n","import { Component, input, OnInit, output, ViewEncapsulation } from '@angular/core';\nimport { AddControlCommand, MapPostboyService, MapSettings, RemoveControlCommand } from '@artstesh/maps';\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\nimport { LayerToggle } from './layer-toggle';\n\n\n@Component({\n   selector: 'app-map-layer-toggle-control',\n   standalone: true,\n   template: '',\n   styleUrl: 'layer-toggle-control.component.scss',\n   encapsulation: ViewEncapsulation.None\n})\nexport class LayerToggleControlComponent extends DestructibleComponent implements OnInit {\n   settings = input.required<MapSettings>();\n   settingsChange = output<MapSettings>();\n   private control?: LayerToggle;\n\n   constructor(private postboy: MapPostboyService) {\n      super();\n   }\n\n\n   ngOnInit(): void {\n      this.control = new LayerToggle(this.postboy);\n      setTimeout(() => this.postboy.fire(new AddControlCommand(this.control!)), 1000); //ToDo Wait for the MapRenderEvent\n      this.control.changeEmitter.subscribe(ev => {\n         this.settingsChange.emit(this.settings().setLyrs(ev));\n      });\n   }\n\n   /**\n    * A method that executes when the component or control is being destroyed.\n    * It checks if the control exists and, if so, dispatches a `RemoveControlCommand`\n    * to perform cleanup or removal operations on the control.\n    *\n    * This function utilizes a conditional check to ensure the existence of the\n    * control before attempting to invoke a command to avoid potential errors.\n    */\n   onDestroy = () => {\n      !!this.control && this.postboy.fire(new RemoveControlCommand(this.control));\n   };\n}\n","import { EventEmitter } from '@angular/core';\r\nimport { MapLyrs, MapPostboyService } from '@artstesh/maps';\r\nimport { Control } from 'ol/control';\r\n\r\n/**\r\n * The LayerToggle class is a UI control component that allows users to toggle between\r\n * different map layers, specifically satellite and terrain layers. It integrates with the\r\n * MapPostboyService to manage changes in the selected map layer.\r\n *\r\n * Extends the Control class to function as a map control.\r\n */\r\nexport class LayerToggle extends Control {\r\n   public changeEmitter = new EventEmitter<MapLyrs>();\r\n   current = MapLyrs.Terrain;\r\n\r\n   /**\r\n    * Constructs a new instance of the class.\r\n    * Initializes a toggle switch UI for selecting between satellite and terrain map layers.\r\n    *\r\n    * @param {MapPostboyService} postboy - A service used to handle map-related communication and operations.\r\n    */\r\n   constructor(opt_options?: any) {\r\n      const label = document.createElement('label');\r\n      label.className = 'switch';\r\n\r\n      const input = document.createElement('input');\r\n      input.type = 'checkbox';\r\n      input.id = 'togBtn';\r\n\r\n      label.appendChild(input);\r\n\r\n      const container = document.createElement('div');\r\n      container.className = 'slider round';\r\n\r\n      const optSatellite = document.createElement('span');\r\n      optSatellite.className = 'off';\r\n      optSatellite.innerHTML = 'Satellite';\r\n\r\n      const optTerrain = document.createElement('span');\r\n      optTerrain.className = 'on';\r\n      optTerrain.innerHTML = 'Terrain';\r\n\r\n      container.appendChild(optSatellite);\r\n      container.appendChild(optTerrain);\r\n\r\n      label.appendChild(container);\r\n\r\n      const element = document.createElement('div');\r\n      element.className = 'map-base-layer-toggle ol-unselectable ol-control';\r\n      element.appendChild(label);\r\n\r\n      super({ element: element, target: (opt_options || {}).target });\r\n      this.optionOn = optTerrain;\r\n      this.optionOff = optSatellite;\r\n      input.checked = this.current == MapLyrs.Terrain;\r\n      this.optionOn.classList.add('active');\r\n      optTerrain.addEventListener(\r\n         'click',\r\n         () => {\r\n            this.changeEmitter.next(MapLyrs.Terrain);\r\n            this.optionOff.classList.remove('active');\r\n            this.optionOn.classList.add('active');\r\n            if (input.checked) input.checked = !input.checked;\r\n         },\r\n         false\r\n      );\r\n      optSatellite.addEventListener(\r\n         'click',\r\n         () => {\r\n            this.changeEmitter.next(MapLyrs.Satellite);\r\n            this.optionOn.classList.remove('active');\r\n            this.optionOff.classList.add('active');\r\n            if (!input.checked) input.checked = !input.checked;\r\n         },\r\n         false\r\n      );\r\n   }\r\n\r\n   private optionOn: HTMLSpanElement;\r\n   private optionOff: HTMLSpanElement;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n/**\r\n * CircleLoaderComponent is a reusable Angular components that displays a circular loading indicator.\r\n *\r\n * This components is typically used to indicate loading or processing state in an application,\r\n * providing a visual cue to users that some background activity is taking place.\r\n *\r\n * The components is standalone and can be used in various parts of the application\r\n * without requiring additional configuration.\r\n *\r\n * Attributes:\r\n * - direction: Determines the direction of the loader's animation.\r\n *              Accepted values are 'clockwise' and 'counterclockwise'.\r\n *              Defaults to 'clockwise'.\r\n */\r\n@Component({\r\n   selector: 'app-circle-loader',\r\n   templateUrl: './circle-loader.component.html',\r\n   styleUrls: ['./circle-loader.component.scss'],\r\n   standalone: true\r\n})\r\nexport class CircleLoaderComponent {\r\n   /**\r\n    * Represents the direction of rotation.\r\n    * It can either be 'clockwise' or 'counterclockwise'.\r\n    *\r\n    * @type {'clockwise' | 'counterclockwise'}\r\n    * @default 'clockwise'\r\n    */\r\n   @Input() public direction: 'clockwise' | 'counterclockwise' = 'clockwise';\r\n}\r\n","<div class=\"circle-loader-block  {{direction}}\">\r\n   <svg width=\"160\" height=\"160\" viewBox=\"0 0 160 160\">\r\n      <circle\r\n         r=\"70\"\r\n         cx=\"80\"\r\n         cy=\"80\"\r\n         fill=\"transparent\"\r\n         stroke=\"#34c759\"\r\n         stroke-width=\"12px\"\r\n         stroke-dasharray=\"439.6px\"\r\n         stroke-dashoffset=\"109.9px\"></circle>\r\n   </svg>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { DestructibleComponent } from '@shared/components/destructible/destructible.component';\r\nimport { CircleLoaderComponent } from './circle-loader/circle-loader.component';\r\n\r\n/**\r\n * Component representing a frozen screen state.\r\n */\r\n@Component({\r\n   selector: 'app-loader',\r\n   templateUrl: './loader.component.html',\r\n   styleUrls: ['./loader.component.scss'],\r\n   standalone: true,\r\n   imports: [CircleLoaderComponent]\r\n})\r\nexport class LoaderComponent extends DestructibleComponent {\r\n   @Input() size = 48;\r\n}\r\n","<div class=\"loader-wrapper\">\r\n   <app-circle-loader\r\n      direction=\"clockwise\"\r\n      [style.width.px]=\"size\"\r\n      [style.height.px]=\"size\"\r\n      [style.font-size.px]=\"size\"></app-circle-loader>\r\n   <app-circle-loader\r\n      [style.width.px]=\"size*.6\"\r\n      [style.height.px]=\"size*.6\"\r\n      [style.font-size.px]=\"size*.6\"\r\n      direction=\"counterclockwise\"></app-circle-loader>\r\n   <app-circle-loader\r\n      direction=\"clockwise\"\r\n      [style.width.px]=\"size*.3\"\r\n      [style.height.px]=\"size*.3\"\r\n      [style.font-size.px]=\"size*.3\"></app-circle-loader>\r\n</div>\r\n","import { PostboyExecutionHandler, PostboyExecutor, PostboyGenericMessage } from '@artstesh/postboy';\nimport { MapPosition } from '@artstesh/maps';\n\nexport class CompareMapPositionExecutor extends PostboyExecutor<boolean> {\n   static readonly ID = '99890e67-ca44-4533-909e-a0d27d29ab9d';\n\n   constructor(public next: MapPosition, public prev?: MapPosition|null) {\n      super();\n   }\n}\n\nexport class CompareMapPositionExecutorHandler extends PostboyExecutionHandler<boolean, CompareMapPositionExecutor>{\n   handle(executor: CompareMapPositionExecutor): boolean {\n      const position = executor.next;\n      var result = true;\n      if (executor.prev) {\n         const zoomChanged = Math.abs(position.zoom - executor.prev.zoom) >= 1;\n         const anchorChanged = this.anchorCompare(executor.next, executor.prev);\n         result = (anchorChanged || zoomChanged);\n      }\n      return result;\n   }\n\n   private anchorCompare(position: MapPosition, prev: MapPosition): boolean {\n      let change = 0;\n      if (position.zoom >= 15) change = .00003;\n      if (position.zoom >= 14) change = .0001;\n      if (position.zoom >= 13) change = .0003;\n      if (position.zoom >= 12) change = .001;\n      if (position.zoom >= 11) change = .002;\n      return Math.abs(position.extent[0] - prev.extent[0]) >= change || Math.abs(position.extent[1] - prev.extent[1]) >= change;\n   }\n\n}\n","import { Subscription } from 'rxjs';\r\n\r\n/**\r\n * An abstract class that provides a base structure for managing and cleaning up subscriptions.\r\n * Designed to prevent memory leaks by ensuring all subscriptions are unsubscribed when no longer needed.\r\n */\r\nexport abstract class ComponentSatelliteService {\r\n   protected subs: Subscription[] = [];\r\n\r\n   /**\r\n    * Unsubscribes from all subscriptions stored in the `subs` array.\r\n    * This method iterates through each subscription and calls the `unsubscribe` method\r\n    * to ensure proper cleanup and prevent memory leaks.\r\n    *\r\n    * @return {void} No return value.\r\n    */\r\n   public down(): void {\r\n      this.subs.forEach(s => s.unsubscribe());\r\n   }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n   production: false,\r\n   fields: 'https://localhost:5002',\r\n   geo: 'https://localhost:5001'\r\n};\r\n\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n   enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic()\r\n   .bootstrapModule(AppModule)\r\n   .catch(err => console.error(err));\r\n"],"names":["catchError","of","takeUntil","ListFieldClustersQuery","FieldClusterInternalService","postboy","remote","_namespace","constructor","addNamespace","recordSubject","up","sub","subscribe","qry","list","clusterByBoundingBoxPost","body","extent","pipe","cancel$","err","result","finish","down","eliminateNamespace","i0","ɵɵinject","i1","AppPostboyService","i2","ClusterService","factory","ɵfac","providedIn","PostboyCallbackMessage","ID","ListFieldsQuery","FieldsInternalService","fieldList","fieldByBoundingBoxPost","zoom","next","error","FieldService","RemoteBalancedHelper","RemoteBalancedHelperFactory","queueFactory","produce","settings","RequestQueueFactory","Dictionary","requests","message","execute","queue","getQueue","hash","force","reset","add","tryFinish","load","m","mutation","e","failure","has","value","cache","put","take","forEach","q","QueryQueue","Queue","data","_data","queries","_requestInProgress","query","each","RemoteServiceRequest","id","ListRegionsQuery","RegionsInternalService","listBalancer","regionGet","RegionService","i3","BaseService","config","http","_rootUrl","rootUrl","GeoApiConfiguration","HttpClient","HttpResponse","filter","map","RequestBuilder","clusterByBoundingBoxPost$Plain","params","context","rb","PATH","request","build","responseType","accept","r","clusterResetPost","clone","undefined","fieldByBoundingBoxPost$Plain","fieldPost$Plain","fieldPost","regionDefinePost$Plain","regionDefinePost","regionGet$Plain","GeoApiModule","forRoot","ngModule","providers","provide","useValue","parentModule","Error","HttpRequest","HttpParams","HttpHeaders","ParameterCodec","encodeKey","key","encodeURIComponent","encodeValue","decodeKey","decodeURIComponent","decodeValue","ParameterCodecInstance","Parameter","name","options","defaultStyle","defaultExplode","style","explode","serializeValue","separator","Array","v","split","join","array","Object","keys","propVal","push","String","PathParameter","append","path","prefix","alreadySerialized","replace","QueryParameter","HeaderParameter","headers","operationPath","method","_path","Map","_query","_header","_bodyContent","_bodyContentType","set","header","contentType","Blob","type","pairs","val","formValue","formDataValue","p","formData","FormData","toAppend","JSON","stringify","pathParam","values","url","httpParams","encoder","queryParam","httpHeaders","headerParam","toUpperCase","reportProgress","ClusterByBoundingBoxPostPath","clusterByBoundingBoxPost$Plain$Response","clusterByBoundingBoxPost$Response","ClusterResetPostPath","clusterResetPost$Response","FieldPostPath","fieldPost$Plain$Response","fieldPost$Response","FieldByBoundingBoxPostPath","fieldByBoundingBoxPost$Plain$Response","fieldByBoundingBoxPost$Response","RegionGetPath","regionGet$Plain$Response","regionGet$Response","RegionDefinePostPath","regionDefinePost$Plain$Response","regionDefinePost$Response","FieldsApiConfiguration","FieldsApiModule","fieldIdGet$Plain","fieldIdGet","FieldIdGetPath","fieldIdGet$Plain$Response","fieldIdGet$Response","ModalPostboyService","AppMessageRegistrator","TitleService","DestructibleComponent","AppComponent","appMessageRegistrator","onDestroy","ɵɵdirectiveInject","selectors","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","decls","vars","template","AppComponent_Template","rf","ctx","ɵɵelement","LocationStrategy","PathLocationStrategy","HttpClientModule","BrowserModule","RouterModule","ArtModalModule","APP_ROUTES","environment","AppModule","bootstrap","useClass","imports","fields","geo","declarations","GisPageComponent","component","signal","ClusterLayerSettings","MapModule","MarkerModel","MarkerStyleHelper","TextStyleHelper","GisClustersEvent","GisClustersComponent","clusterLayerSettings","setMaxZoom","setStyle","fs","count","f","withText","circle","get","markers","ngOnInit","ev","items","i","lat","lon","standalone","ɵɵStandaloneFeature","consts","GisClustersComponent_Template","ɵɵelementStart","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","MarkersComponent","ClusterLayerComponent","encapsulation","changeDetection","GisFieldsEvent","GisFieldMarkersComponent","setMinZoom","setDistance","length","wkt","GisFieldMarkersComponent_Template","input","FlexModule","NgTemplateOutlet","TranslateModule","ɵɵelementContainer","GisFieldPassportDataWrapperComponent","label","required","contentRef","inputs","ɵɵInputFlags","SignalBased","GisFieldPassportDataWrapperComponent_Template","ɵɵtext","ɵɵtemplate","GisFieldPassportDataWrapperComponent_ng_container_5_Template","ɵɵtextInterpolate","ɵɵpipeBind1","DefaultLayoutDirective","DefaultLayoutGapDirective","TranslatePipe","styles","DecimalPipe","ɵɵtextInterpolate1","ctx_r0","field","ɵɵtextInterpolate2","ɵɵpipeBind2","areaM2","GisFieldPassportFieldInfoComponent","GisFieldPassportFieldInfoComponent_Template","GisFieldPassportFieldInfoComponent_ng_template_3_Template","ɵɵtemplateRefExtractor","GisFieldPassportFieldInfoComponent_ng_template_5_Template","fieldId_r2","area_r3","GisFieldPassportSectionWrapperComponent","GisFieldPassportSectionWrapperComponent_Template","GisFieldPassportSectionWrapperComponent_ng_container_4_Template","CloseModalCommand","ModalSettings","OpenModalCommand","ShowFieldPassportCommand","switchMap","tap","LoadingZoneComponent","fieldInfoModalContent_r2","ctx_r2","GisFieldPassportModalComponent","modalPostboy","c","fireCallback","close","fire","GisFieldPassportModalComponent_Template","ɵɵlistener","GisFieldPassportModalComponent_Template_div_click_1_listener","ɵɵrestoreView","_r1","ɵɵresetView","GisFieldPassportModalComponent_ng_template_4_Template","GisFieldPassportModalComponent_ng_template_6_Template","cadastralLoadingZone_r4","ModalComponent","DefaultLayoutAlignDirective","FeatureLayerSettings","PolygonModel","PolygonStyleHelper","GisConstants","GisFieldPolygonsComponent","simple","polygons","layerSettings","setName","GisFieldPolygonsLayerName","fromWKT","GisFieldPolygonsComponent_Template","FeatureLayerComponent","PolygonsComponent","GisReionPolygonsComponent","polygonStyle","rs","GisReionPolygonsComponent_Template","DragDropModule","FitToPolygonsCommand","MapLyrs","MapSettings","ZoomControlSettings","LayerToggleControlComponent","ApplyGisExtentCommand","GisMessageRegisterService","GisFeaturesOrchestratorService","GisComponent","mapPostboy","register","setCenter","setZoom","setInteractionSettings","altShiftDragRotate","pinchRotate","setLyrs","Terrain","zoomSettings","setZoomInLabel","observeVisibiliyMarkers","MapPostboyService","GisComponent_Template","ɵɵtwoWayListener","GisComponent_Template_app_map_layer_toggle_control_settingsChange_6_listener","$event","ɵɵtwoWayBindingSet","ɵɵtwoWayProperty","MapPlateComponent","MapControlZoomComponent","PostboyGenericMessage","GetMapPositionExecutor","MapMoveEndEvent","CompareMapPositionExecutor","startWith","Subject","previousPosition","position","exec","mapPositionFilter","update","clusters","PostboyAbstractRegistrator","feature","registerServices","_up","GisPageMessageRegistratorService","registrator","ngOnDestroy","GisPageComponent_Template","FlexFillDirective","ZoomTargetFieldsCommand","GisFieldMarkersLayerName","CnhFieldPolygonEdgeZoom","CompareMapPositionExecutorHandler","recordHandler","title","regions","PostboyService","titleService","defaultTitle","setTitle","Title","satellite","subs","s","unsubscribe","ComponentSatelliteService","DestructibleComponent_Template","NgIf","LoaderComponent","LoadingZoneComponent_div_0_ng_container_1_Template","size","detector","isLoading","_isLoading","detectChanges","ChangeDetectorRef","LoadingZoneComponent_Template","LoadingZoneComponent_div_0_Template","LoadingZoneComponent_div_1_Template","output","AddControlCommand","RemoveControlCommand","LayerToggle","settingsChange","control","setTimeout","changeEmitter","emit","outputs","LayerToggleControlComponent_Template","EventEmitter","Control","current","opt_options","document","createElement","className","appendChild","container","optSatellite","innerHTML","optTerrain","element","target","optionOn","optionOff","checked","classList","addEventListener","remove","Satellite","CircleLoaderComponent","direction","CircleLoaderComponent_Template","ɵɵclassMapInterpolate1","t","LoaderComponent_Template","ɵɵstyleProp","PostboyExecutionHandler","PostboyExecutor","prev","handle","executor","zoomChanged","Math","abs","anchorChanged","anchorCompare","change","production","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","console"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}