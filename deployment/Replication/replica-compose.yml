version: '3.8'

services:
  sso1:
    image: ${DOCKER_REGISTRY}/africa-platform/sso1:${TAG}
    container_name: sso1
    restart: always
    build:
      context: ../../
      dockerfile: SSO/Host/Dockerfile
    profiles:
      - development
      - production
    networks:
      - postgres-network
    depends_on:
      - haproxy

  sso2:
    image: ${DOCKER_REGISTRY}/africa-platform/sso2:${TAG}
    container_name: sso2
    restart: always
    build:
      context: ../../
      dockerfile: SSO/Host/Dockerfile
    profiles:
      - development
      - production
    networks:
      - postgres-network
    depends_on:
      - haproxy

  sso3:
    image: ${DOCKER_REGISTRY}/africa-platform/sso3:${TAG}
    container_name: sso3
    restart: always
    build:
      context: ../../
      dockerfile: SSO/Host/Dockerfile
    profiles:
      - development
      - production
    networks:
      - postgres-network
    depends_on:
      - haproxy

  #### Infrastructure
  nginx:
    build:
      context: ./
      dockerfile: ./nginx/Dockerfile
    ports:
      - "5001:443"
    depends_on:
      - sso1
      - sso2
      - sso3
    networks:
      - postgres-network

  haproxy:
    image: haproxy:2.4
    volumes:
      - ./haproxy/:/usr/local/etc/haproxy/
    ports:
      - "5432:5432"
    profiles:
      - development
    depends_on:
      - postgres
      - postgres-slave1
      - postgres-slave2
    networks:
      - postgres-network

  postgres:
    build: ./postgres/Master
    container_name: postgres
    profiles:
      - development
    networks:
      - postgres-network
    volumes:
      - postgres:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-slave1:
    build: ./postgres/Slave1
    container_name: postgres-slave1
    profiles:
      - development
    networks:
      - postgres-network
    volumes:
      - slave1:/var/lib/postgresql/data/
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-slave2:
    build: ./postgres/Slave2
    container_name: postgres-slave2
    profiles:
      - development
    networks:
      - postgres-network
    volumes:
      - slave2:/var/lib/postgresql/data/
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres:
  slave1:
  slave2:

networks:
  postgres-network:
    driver: bridge
    name: your_project_postgres-network
