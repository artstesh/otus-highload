version: '3.8'

services:
  sso:
    image: ${DOCKER_REGISTRY}/africa-platform/sso:${TAG}
    container_name: sso
    restart: always
    build:
      context: ../
      dockerfile: SSO/Host/Dockerfile
    profiles:
      - development
      - production
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  dialogs:
    image: ${DOCKER_REGISTRY}/africa-platform/dialogs:${TAG}
    container_name: dialogs
    restart: always
    build:
      context: ../
      dockerfile: Dialogs/Host/Dialogs.Api/Dockerfile
    profiles:
      - development
      - production
    depends_on:
      dialogs-pg-1:
          condition: service_healthy
      dialogs-pg-2:
          condition: service_healthy

  post-socket:
    image: ${DOCKER_REGISTRY}/africa-platform/post-socket:${TAG}
    container_name: post-socket
    restart: always
    build:
      context: ../
      dockerfile: Infrastructure/PostSocket/Hosts/PostSocket.Daemon/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  #### Infrastructure
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    profiles:
      - development
    volumes:
      - postgres:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    hostname: 'otus-rabbit'
    restart: always
    build:
      context: ./services/rabbitmq
      dockerfile: Dockerfile
    environment:
      RABBITMQ_DEFAULT_USER: otus
      RABBITMQ_DEFAULT_PASS: 6GccewECzxGJgTh4QYr82D8JUgCxsC5E
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  postgres:
  redis_data:
  rabbitmq_data:

networks:
  default:
    driver: bridge
